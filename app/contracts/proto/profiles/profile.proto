syntax = "proto3";

package protobuf;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/EvgeniyBudaev/tgdating-go/app/contracts/proto/profiles";

message FileMetadata {
  string filename = 1; // Имя файла
  int64 size = 2; // Размер файла в байтах
  bytes content = 3;   // Содержимое файла в виде массива байтов
}

message ImageStatusResponse {
  bool isBlocked = 1; // заблокировано изображение да/нет
  bool isPrimary = 2; // изображение является основным да/нет
  bool isPrivate = 3; // изображение является приватным да/нет
}

message ImageResponse {
  uint64 id = 1; // id изображения
  string telegramUserId = 2; // id пользователя в телеграм
  string name = 3; // название файла
  string url = 4; // url файла
  int64 size = 5; // Размер файла в байтах
  ImageStatusResponse status = 6; // статусы изображений
  google.protobuf.Timestamp createdAt = 7; // дата создания
  google.protobuf.Timestamp updatedAt = 8; // дата обновления
}

message Point {
  double latitude = 1; // широта
  double longitude = 2; // долгота
}

message NavigatorResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  Point location = 2; // объект с координатами
}
message NavigatorDetailResponse {
  optional double distance = 1; // расстояние до просматриваемого пользователя
}

message FilterResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  string searchGender = 2; // поиск по половому признаку
  string lookingFor = 3; // цель поиска
  uint64 ageFrom = 4; // возраст от`
  uint64 ageTo = 5; // возраст до
  double distance = 6; // дистанция
  uint64 page = 7; // номер текущей страницы
  uint64 size = 8; // количество элементов на странице
}

message TelegramResponse {
  string userId = 1; // id пользователя
  string username = 2; // username пользователя
  string firstName = 3; // имя пользователя
  string lastName = 4; // фамилия пользователя
  string languageCode = 5; // язык пользователя
  bool allowsWriteToPm = 6; // true, если этот пользователь разрешил боту отправлять ему сообщения
  string queryId = 7; // id чата
}

message StatusResponse {
  bool isBlocked = 1; // заблокирован пользователь да/нет
  bool isFrozen = 2; // заморожен пользователь да/нет
  bool isInvisible = 3; // неведимка да/нет
  bool isOnline = 4; // онлайн да/нет
  bool isPremium = 5; // наличие премиум аакаунта да/нет
  bool isShowDistance = 6; // показывать дистанцию до текущего пользваотеля да/нет
}

message BlockResponse {
  bool isBlocked = 1; // заблокирован пользователь да/нет
}

message LikeResponse {
  uint64 id = 1; // id лайка
  string telegramUserId = 2; // id пользователя в телеграме
  string likedTelegramUserId = 3; // id сессии того, кого лайкнули
  bool isLiked = 4; // установлен лайк да/нет
  google.protobuf.Timestamp createdAt = 5; // дата создания
  google.protobuf.Timestamp updatedAt = 6; // дата обновления
}

message ProfileAddRequest {
  string displayName = 1; // Имя для отображения
  google.protobuf.Timestamp birthday = 2; // дата для рождения
  string gender = 3; // пол
  string searchGender = 4; // поиск по половому признаку
  string location = 5; // местоположение
  string description = 6; // описание
  double height = 7; // рост
  double weight = 8; // вес
  string lookingFor = 9; // цель поиска
  string telegramUserId = 10; // id пользователя в телеграм
  string telegramUsername = 11; // username пользователя в телеграм
  string telegramFirstName = 12; // имя пользователя в телеграм
  string telegramLastName = 13; // фамилия пользователя в телеграм
  string telegramLanguageCode = 14; // язык пользователя в телеграм
  bool telegramAllowsWriteToPm = 15; // true, если этот пользователь разрешил боту отправлять ему сообщения
  string telegramQueryId = 16; // id чата в телеграм
  optional double latitude = 17; // широта
  optional double longitude = 18; // долгота
  uint64 ageFrom = 19; // возраст от
  uint64 ageTo = 20; // возраст до
  double distance = 21; // дистанция
  uint64 page = 22; // номер текущей страницы
  uint64 size = 23; // количество элементов на странице
  repeated FileMetadata files = 24; // список файлов-изображений
}

message ProfileAddResponse {
  bool success = 1; // успешно добавлен да/нет
}

message ProfileUpdateRequest {
  string displayName = 1; // Имя для отображения
  google.protobuf.Timestamp birthday = 2; // дата для рождения
  string gender = 3; // пол
  string searchGender = 4; // поиск по половому признаку
  string location = 5; // местоположение
  string description = 6; // описание
  double height = 7; // рост
  double weight = 8; // вес
  string lookingFor = 9; // цель поиска
  string telegramUserId = 10; // id пользователя в телеграм
  string telegramUsername = 11; // username пользователя в телеграм
  string telegramFirstName = 12; // имя пользователя в телеграм
  string telegramLastName = 13; // фамилия пользователя в телеграм
  string telegramLanguageCode = 14; // язык пользователя в телеграм
  bool telegramAllowsWriteToPm = 15; // true, если этот пользователь разрешил боту отправлять ему сообщения
  string telegramQueryId = 16; // id чата в телеграм
  optional double latitude = 17; // широта
  optional double longitude = 18; // долгота
  uint64 ageFrom = 19; // возраст от
  uint64 ageTo = 20; // возраст до
  double distance = 21; // дистанция
  uint64 page = 22; // номер текущей страницы
  uint64 size = 23; // количество элементов на странице
  bool isImages = 24; // наличие ранее сохранненых фотографий
  repeated FileMetadata files = 25;
}

message ProfileFreezeRequest {
  string telegramUserId = 1; // id пользователя в телеграм
}

message ProfileFreezeResponse {
  bool success = 1; // успешно заморожен да/нет
}

message ProfileRestoreRequest {
  string telegramUserId = 1; // id пользователя в телеграм
}

message ProfileRestoreResponse {
  bool success = 1; // успешно восстановлен да/нет
}

message ProfileDeleteRequest {
  string telegramUserId = 1; // id пользователя в телеграм
}

message ProfileDeleteResponse {
  bool success = 1; // успешно удалено да/нет
}

message ProfileGetByTelegramUserIdRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  optional double latitude = 2; // широта
  optional double longitude = 3; // долгота
}

message ProfileByTelegramUserIdResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  string displayName = 2; // Имя для отображения
  google.protobuf.Timestamp birthday = 3; // дата для рождения
  string gender = 4; // пол
  string location = 5; // местоположение
  string description = 6; // описание
  double height = 7; // рост
  double weight = 8; // вес
  google.protobuf.Timestamp createdAt = 9; // дата создания
  google.protobuf.Timestamp updatedAt = 10; // дата обновления
  google.protobuf.Timestamp lastOnline = 11; // дата последнего входа в систему
  NavigatorResponse navigator = 12; // объект навигатор
  FilterResponse filter = 13; // объект фильтр
  TelegramResponse telegram = 14; // объект телеграм
  StatusResponse status = 15; // статус пользователя
  repeated ImageResponse images = 16; // список изображений
}

message ProfileGetDetailRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string viewedTelegramUserId = 2; // id сессии того, кого смотрим
  optional double latitude = 3; // широта
  optional double longitude = 4; // долгота
}

message ProfileDetailResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  string displayName = 2; // Имя для отображения
  google.protobuf.Timestamp birthday = 3; // дата для рождения
  string location = 4; // местоположение
  string description = 5; // описание
  double height = 6; // рост
  double weight = 7; // вес
  NavigatorDetailResponse navigator = 8; // объект навигатор
  StatusResponse status = 9; // статус пользователя
  BlockResponse block = 10; // объект блок
  LikeResponse like = 11; //  объект дайк
  repeated ImageResponse images = 12; // список изображений
}

message ProfileGetShortInfoRequest {
  string telegramUserId = 1; // id пользователя в телеграм
}

message ProfileShortInfoResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  bool isBlocked = 2; // заблокирован пользователь да/нет
  bool isFrozen = 3; // заморожен пользователь да/нет
  string searchGender = 4; // поиск по половому признаку
  string lookingFor = 5; // цель поиска
  uint64 ageFrom = 6; // возраст от
  uint64 ageTo = 7; // возраст до
  double distance = 8; // дистанция
  uint64 page = 9; // номер текущей страницы
  uint64 size = 10; // количество элементов на странице
}

message ProfileGetListRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string searchGender = 2; // поиск по половому признаку
  string lookingFor = 3; // цель поиска
  uint64 ageFrom = 4; // возраст от
  uint64 ageTo = 5; // возраст до
  double distance = 6; // дистанция
  uint64 page = 7; // номер текущей страницы
  uint64 size = 8; // количество элементов на странице
  optional double latitude = 9; // широта
  optional double longitude = 10; // долгота
}

message ProfileListItemResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  optional double distance = 2; // дистанция
  string url = 3; // url изображения
  bool isOnline = 4; // пользователь онлайн да/нет
  google.protobuf.Timestamp lastOnline = 5; // дата последнего входа в систему
}

message ProfileListResponse {
  bool hasPrevious = 1; // наличие предыдущих страниц да/нет
  bool hasNext = 2; // наличие следующих страниц да/нет
  uint64 page = 3; // номер текущей страницы
  uint64 size = 4; // количество элементов на странице
  uint64 totalEntities = 5; // общее количество элементов
  uint64 totalPages = 6; // общее количество страниц
  repeated ProfileListItemResponse content = 7; // список профилей
}

message GetImageByTelegramUserIdRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string fileName = 2; // название файла с расширением
}

message ImageByTelegramUserIdResponse {
  bytes file = 1; // файл
}

message GetImageByIdRequest {
  uint64 id = 1; // id изображения
}

message ImageDeleteRequest {
  uint64 id = 1; // id файла
}

message ImageDeleteResponse {
  bool success = 1; // успешно удаление файла да/нет
}

message FilterUpdateRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string searchGender = 2; // поиск по половому признаку
  uint64 ageFrom = 3; // возраст от
  uint64 ageTo = 4; // возраст до
}

message FilterUpdateResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  string searchGender = 2; // поиск по половому признаку
  string lookingFor = 3; // цель поиска
  uint64 ageFrom = 4; // возраст от
  uint64 ageTo = 5; // возраст до
  double distance = 6; // дистанция
  uint64 page = 7; // номер текущей страницы
  uint64 size = 8; // количество элементов на странице
}

message BlockAddRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string blockedTelegramUserId = 2; // id того, кого блокируем
}

message BlockAddResponse {
  bool success = 1; // успешно заблокирован да/нет
}

message LikeAddRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string likedTelegramUserId = 2; // id пользователя который понравился
  string locale = 3; // локаль пользователя
}

message LikeAddResponse {
  uint64 id = 1; // id блока
  string telegramUserId = 2; // id пользователя в телеграм
  string likedTelegramUserId = 3; // id понравившегося пользователя
  bool isLiked = 4; // есть лайк да/нет
  google.protobuf.Timestamp createdAt = 5; // дата создания
  google.protobuf.Timestamp updatedAt = 6; // дата обновления
}

message LikeUpdateRequest {
  uint64 id = 1; // id блока
  string telegramUserId = 2; // id пользователя в телеграм
  bool isLiked = 3; // есть лайк да/нет
}

message LikeUpdateResponse {
  uint64 id = 1; // id блока
  string telegramUserId = 2; // id пользователя в телеграм
  string likedTelegramUserId = 3; // id понравившегося пользователя
  bool isLiked = 4; // есть лайк да/нет
  google.protobuf.Timestamp createdAt = 5; // дата создания
  google.protobuf.Timestamp updatedAt = 6; // дата обновления
}

message ComplaintAddRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  string criminalTelegramUserId = 2; // id мошенника
  string reason = 3; // причина жалобы
}

message ComplaintAddResponse {
  uint64 id = 1; // id блока
  string telegramUserId = 2; // id пользователя в телеграм
  string criminalTelegramUserId = 3; // id мошенника
  string reason = 4; // причина жалобы
  google.protobuf.Timestamp createdAt = 5; // дата создания
  google.protobuf.Timestamp updatedAt = 6; // дата обновления
}

message NavigatorUpdateRequest {
  string telegramUserId = 1; // id пользователя в телеграм
  double latitude = 2; // широта
  double longitude = 3; // долгота
}

message NavigatorUpdateResponse {
  string telegramUserId = 1; // id пользователя в телеграм
  Point location = 2; // объект с координатами
}

/*
* Описание сервиса Profile
*/
service Profile {
  rpc AddProfile(ProfileAddRequest) returns (ProfileAddResponse); // добавление нового пользователя
  rpc UpdateProfile(ProfileUpdateRequest) returns (ProfileByTelegramUserIdResponse); // обновление данных пользователя
  rpc FreezeProfile(ProfileFreezeRequest) returns (ProfileFreezeResponse); // заморозка пользователя
  rpc RestoreProfile(ProfileRestoreRequest) returns (ProfileRestoreResponse); // восстановление пользователя
  rpc DeleteProfile(ProfileDeleteRequest) returns (ProfileDeleteResponse); // удаление пользователя
  rpc GetProfileByTelegramUserId(ProfileGetByTelegramUserIdRequest) returns (ProfileByTelegramUserIdResponse); // получение профиля по id сессии
  rpc GetProfileDetail(ProfileGetDetailRequest) returns (ProfileDetailResponse); // получение карточки профиля
  rpc GetProfileShortInfo(ProfileGetShortInfoRequest) returns (ProfileShortInfoResponse); // получение короткой информации по профилю
  rpc GetProfileList(ProfileGetListRequest) returns (ProfileListResponse); // получение списка профилей
  rpc GetImageByTelegramUserId(GetImageByTelegramUserIdRequest) returns (ImageByTelegramUserIdResponse); // получение файла
  rpc GetImageById(GetImageByIdRequest) returns (ImageResponse); // получение изображения по id
  rpc DeleteImage(ImageDeleteRequest) returns (ImageDeleteResponse); // удаление файла
  rpc UpdateFilter(FilterUpdateRequest) returns (FilterUpdateResponse); // получение данных фильтра
  rpc AddBlock(BlockAddRequest) returns (BlockAddResponse); // добавить пользователя в блок лист
  rpc AddLike(LikeAddRequest) returns (LikeAddResponse); // поставить лайк
  rpc UpdateLike(LikeUpdateRequest) returns (LikeUpdateResponse); // обновить лайк
  rpc AddComplaint(ComplaintAddRequest) returns (ComplaintAddResponse); // добавить жалобу
  rpc UpdateCoordinates(NavigatorUpdateRequest) returns (NavigatorUpdateResponse); // обновление координат
}