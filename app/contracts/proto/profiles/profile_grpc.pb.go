// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: contracts/proto/profiles/profile.proto

package profiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Profile_AddProfile_FullMethodName                   = "/protobuf.Profile/AddProfile"
	Profile_UpdateProfile_FullMethodName                = "/protobuf.Profile/UpdateProfile"
	Profile_FreezeProfile_FullMethodName                = "/protobuf.Profile/FreezeProfile"
	Profile_RestoreProfile_FullMethodName               = "/protobuf.Profile/RestoreProfile"
	Profile_DeleteProfile_FullMethodName                = "/protobuf.Profile/DeleteProfile"
	Profile_GetProfile_FullMethodName                   = "/protobuf.Profile/GetProfile"
	Profile_GetProfileDetail_FullMethodName             = "/protobuf.Profile/GetProfileDetail"
	Profile_GetProfileShortInfo_FullMethodName          = "/protobuf.Profile/GetProfileShortInfo"
	Profile_GetProfileList_FullMethodName               = "/protobuf.Profile/GetProfileList"
	Profile_CheckProfileExists_FullMethodName           = "/protobuf.Profile/CheckProfileExists"
	Profile_GetImageByTelegramUserId_FullMethodName     = "/protobuf.Profile/GetImageByTelegramUserId"
	Profile_GetImageLastByTelegramUserId_FullMethodName = "/protobuf.Profile/GetImageLastByTelegramUserId"
	Profile_GetImageById_FullMethodName                 = "/protobuf.Profile/GetImageById"
	Profile_DeleteImage_FullMethodName                  = "/protobuf.Profile/DeleteImage"
	Profile_GetFilter_FullMethodName                    = "/protobuf.Profile/GetFilter"
	Profile_UpdateFilter_FullMethodName                 = "/protobuf.Profile/UpdateFilter"
	Profile_GetTelegram_FullMethodName                  = "/protobuf.Profile/GetTelegram"
	Profile_AddBlock_FullMethodName                     = "/protobuf.Profile/AddBlock"
	Profile_GetBlockedList_FullMethodName               = "/protobuf.Profile/GetBlockedList"
	Profile_Unblock_FullMethodName                      = "/protobuf.Profile/Unblock"
	Profile_AddLike_FullMethodName                      = "/protobuf.Profile/AddLike"
	Profile_UpdateLike_FullMethodName                   = "/protobuf.Profile/UpdateLike"
	Profile_GetLastLike_FullMethodName                  = "/protobuf.Profile/GetLastLike"
	Profile_AddComplaint_FullMethodName                 = "/protobuf.Profile/AddComplaint"
	Profile_UpdateCoordinates_FullMethodName            = "/protobuf.Profile/UpdateCoordinates"
	Profile_AddPayment_FullMethodName                   = "/protobuf.Profile/AddPayment"
	Profile_CheckPremium_FullMethodName                 = "/protobuf.Profile/CheckPremium"
	Profile_UpdateSettings_FullMethodName               = "/protobuf.Profile/UpdateSettings"
)

// ProfileClient is the client API for Profile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileClient interface {
	AddProfile(ctx context.Context, in *ProfileAddRequest, opts ...grpc.CallOption) (*ProfileAddResponse, error)
	UpdateProfile(ctx context.Context, in *ProfileUpdateRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	FreezeProfile(ctx context.Context, in *ProfileFreezeRequest, opts ...grpc.CallOption) (*ProfileFreezeResponse, error)
	RestoreProfile(ctx context.Context, in *ProfileRestoreRequest, opts ...grpc.CallOption) (*ProfileRestoreResponse, error)
	DeleteProfile(ctx context.Context, in *ProfileDeleteRequest, opts ...grpc.CallOption) (*ProfileDeleteResponse, error)
	GetProfile(ctx context.Context, in *ProfileGetRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	GetProfileDetail(ctx context.Context, in *ProfileGetDetailRequest, opts ...grpc.CallOption) (*ProfileDetailResponse, error)
	GetProfileShortInfo(ctx context.Context, in *ProfileGetShortInfoRequest, opts ...grpc.CallOption) (*ProfileShortInfoResponse, error)
	GetProfileList(ctx context.Context, in *ProfileGetListRequest, opts ...grpc.CallOption) (*ProfileListResponse, error)
	CheckProfileExists(ctx context.Context, in *CheckProfileExistsRequest, opts ...grpc.CallOption) (*CheckProfileExistsResponse, error)
	GetImageByTelegramUserId(ctx context.Context, in *GetImageByTelegramUserIdRequest, opts ...grpc.CallOption) (*ImageByTelegramUserIdResponse, error)
	GetImageLastByTelegramUserId(ctx context.Context, in *GetImageLastByTelegramUserIdRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	GetImageById(ctx context.Context, in *GetImageByIdRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	DeleteImage(ctx context.Context, in *ImageDeleteRequest, opts ...grpc.CallOption) (*ImageDeleteResponse, error)
	GetFilter(ctx context.Context, in *FilterGetRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	UpdateFilter(ctx context.Context, in *FilterUpdateRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	GetTelegram(ctx context.Context, in *TelegramGetRequest, opts ...grpc.CallOption) (*TelegramResponse, error)
	AddBlock(ctx context.Context, in *BlockAddRequest, opts ...grpc.CallOption) (*BlockAddResponse, error)
	GetBlockedList(ctx context.Context, in *GetBlockedListRequest, opts ...grpc.CallOption) (*GetBlockedListResponse, error)
	Unblock(ctx context.Context, in *UnblockRequest, opts ...grpc.CallOption) (*UnblockResponse, error)
	AddLike(ctx context.Context, in *LikeAddRequest, opts ...grpc.CallOption) (*LikeAddResponse, error)
	UpdateLike(ctx context.Context, in *LikeUpdateRequest, opts ...grpc.CallOption) (*LikeUpdateResponse, error)
	GetLastLike(ctx context.Context, in *LikeGetLastRequest, opts ...grpc.CallOption) (*LikeGetLastResponse, error)
	AddComplaint(ctx context.Context, in *ComplaintAddRequest, opts ...grpc.CallOption) (*ComplaintAddResponse, error)
	UpdateCoordinates(ctx context.Context, in *NavigatorUpdateRequest, opts ...grpc.CallOption) (*NavigatorUpdateResponse, error)
	AddPayment(ctx context.Context, in *PaymentAddRequest, opts ...grpc.CallOption) (*PaymentAddResponse, error)
	CheckPremium(ctx context.Context, in *CheckPremiumRequest, opts ...grpc.CallOption) (*CheckPremiumResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
}

type profileClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileClient(cc grpc.ClientConnInterface) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) AddProfile(ctx context.Context, in *ProfileAddRequest, opts ...grpc.CallOption) (*ProfileAddResponse, error) {
	out := new(ProfileAddResponse)
	err := c.cc.Invoke(ctx, Profile_AddProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UpdateProfile(ctx context.Context, in *ProfileUpdateRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, Profile_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) FreezeProfile(ctx context.Context, in *ProfileFreezeRequest, opts ...grpc.CallOption) (*ProfileFreezeResponse, error) {
	out := new(ProfileFreezeResponse)
	err := c.cc.Invoke(ctx, Profile_FreezeProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) RestoreProfile(ctx context.Context, in *ProfileRestoreRequest, opts ...grpc.CallOption) (*ProfileRestoreResponse, error) {
	out := new(ProfileRestoreResponse)
	err := c.cc.Invoke(ctx, Profile_RestoreProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) DeleteProfile(ctx context.Context, in *ProfileDeleteRequest, opts ...grpc.CallOption) (*ProfileDeleteResponse, error) {
	out := new(ProfileDeleteResponse)
	err := c.cc.Invoke(ctx, Profile_DeleteProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetProfile(ctx context.Context, in *ProfileGetRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, Profile_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetProfileDetail(ctx context.Context, in *ProfileGetDetailRequest, opts ...grpc.CallOption) (*ProfileDetailResponse, error) {
	out := new(ProfileDetailResponse)
	err := c.cc.Invoke(ctx, Profile_GetProfileDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetProfileShortInfo(ctx context.Context, in *ProfileGetShortInfoRequest, opts ...grpc.CallOption) (*ProfileShortInfoResponse, error) {
	out := new(ProfileShortInfoResponse)
	err := c.cc.Invoke(ctx, Profile_GetProfileShortInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetProfileList(ctx context.Context, in *ProfileGetListRequest, opts ...grpc.CallOption) (*ProfileListResponse, error) {
	out := new(ProfileListResponse)
	err := c.cc.Invoke(ctx, Profile_GetProfileList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) CheckProfileExists(ctx context.Context, in *CheckProfileExistsRequest, opts ...grpc.CallOption) (*CheckProfileExistsResponse, error) {
	out := new(CheckProfileExistsResponse)
	err := c.cc.Invoke(ctx, Profile_CheckProfileExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetImageByTelegramUserId(ctx context.Context, in *GetImageByTelegramUserIdRequest, opts ...grpc.CallOption) (*ImageByTelegramUserIdResponse, error) {
	out := new(ImageByTelegramUserIdResponse)
	err := c.cc.Invoke(ctx, Profile_GetImageByTelegramUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetImageLastByTelegramUserId(ctx context.Context, in *GetImageLastByTelegramUserIdRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, Profile_GetImageLastByTelegramUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetImageById(ctx context.Context, in *GetImageByIdRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, Profile_GetImageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) DeleteImage(ctx context.Context, in *ImageDeleteRequest, opts ...grpc.CallOption) (*ImageDeleteResponse, error) {
	out := new(ImageDeleteResponse)
	err := c.cc.Invoke(ctx, Profile_DeleteImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetFilter(ctx context.Context, in *FilterGetRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, Profile_GetFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UpdateFilter(ctx context.Context, in *FilterUpdateRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, Profile_UpdateFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetTelegram(ctx context.Context, in *TelegramGetRequest, opts ...grpc.CallOption) (*TelegramResponse, error) {
	out := new(TelegramResponse)
	err := c.cc.Invoke(ctx, Profile_GetTelegram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) AddBlock(ctx context.Context, in *BlockAddRequest, opts ...grpc.CallOption) (*BlockAddResponse, error) {
	out := new(BlockAddResponse)
	err := c.cc.Invoke(ctx, Profile_AddBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetBlockedList(ctx context.Context, in *GetBlockedListRequest, opts ...grpc.CallOption) (*GetBlockedListResponse, error) {
	out := new(GetBlockedListResponse)
	err := c.cc.Invoke(ctx, Profile_GetBlockedList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Unblock(ctx context.Context, in *UnblockRequest, opts ...grpc.CallOption) (*UnblockResponse, error) {
	out := new(UnblockResponse)
	err := c.cc.Invoke(ctx, Profile_Unblock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) AddLike(ctx context.Context, in *LikeAddRequest, opts ...grpc.CallOption) (*LikeAddResponse, error) {
	out := new(LikeAddResponse)
	err := c.cc.Invoke(ctx, Profile_AddLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UpdateLike(ctx context.Context, in *LikeUpdateRequest, opts ...grpc.CallOption) (*LikeUpdateResponse, error) {
	out := new(LikeUpdateResponse)
	err := c.cc.Invoke(ctx, Profile_UpdateLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) GetLastLike(ctx context.Context, in *LikeGetLastRequest, opts ...grpc.CallOption) (*LikeGetLastResponse, error) {
	out := new(LikeGetLastResponse)
	err := c.cc.Invoke(ctx, Profile_GetLastLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) AddComplaint(ctx context.Context, in *ComplaintAddRequest, opts ...grpc.CallOption) (*ComplaintAddResponse, error) {
	out := new(ComplaintAddResponse)
	err := c.cc.Invoke(ctx, Profile_AddComplaint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UpdateCoordinates(ctx context.Context, in *NavigatorUpdateRequest, opts ...grpc.CallOption) (*NavigatorUpdateResponse, error) {
	out := new(NavigatorUpdateResponse)
	err := c.cc.Invoke(ctx, Profile_UpdateCoordinates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) AddPayment(ctx context.Context, in *PaymentAddRequest, opts ...grpc.CallOption) (*PaymentAddResponse, error) {
	out := new(PaymentAddResponse)
	err := c.cc.Invoke(ctx, Profile_AddPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) CheckPremium(ctx context.Context, in *CheckPremiumRequest, opts ...grpc.CallOption) (*CheckPremiumResponse, error) {
	out := new(CheckPremiumResponse)
	err := c.cc.Invoke(ctx, Profile_CheckPremium_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, Profile_UpdateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServer is the server API for Profile service.
// All implementations must embed UnimplementedProfileServer
// for forward compatibility
type ProfileServer interface {
	AddProfile(context.Context, *ProfileAddRequest) (*ProfileAddResponse, error)
	UpdateProfile(context.Context, *ProfileUpdateRequest) (*ProfileResponse, error)
	FreezeProfile(context.Context, *ProfileFreezeRequest) (*ProfileFreezeResponse, error)
	RestoreProfile(context.Context, *ProfileRestoreRequest) (*ProfileRestoreResponse, error)
	DeleteProfile(context.Context, *ProfileDeleteRequest) (*ProfileDeleteResponse, error)
	GetProfile(context.Context, *ProfileGetRequest) (*ProfileResponse, error)
	GetProfileDetail(context.Context, *ProfileGetDetailRequest) (*ProfileDetailResponse, error)
	GetProfileShortInfo(context.Context, *ProfileGetShortInfoRequest) (*ProfileShortInfoResponse, error)
	GetProfileList(context.Context, *ProfileGetListRequest) (*ProfileListResponse, error)
	CheckProfileExists(context.Context, *CheckProfileExistsRequest) (*CheckProfileExistsResponse, error)
	GetImageByTelegramUserId(context.Context, *GetImageByTelegramUserIdRequest) (*ImageByTelegramUserIdResponse, error)
	GetImageLastByTelegramUserId(context.Context, *GetImageLastByTelegramUserIdRequest) (*ImageResponse, error)
	GetImageById(context.Context, *GetImageByIdRequest) (*ImageResponse, error)
	DeleteImage(context.Context, *ImageDeleteRequest) (*ImageDeleteResponse, error)
	GetFilter(context.Context, *FilterGetRequest) (*FilterResponse, error)
	UpdateFilter(context.Context, *FilterUpdateRequest) (*FilterResponse, error)
	GetTelegram(context.Context, *TelegramGetRequest) (*TelegramResponse, error)
	AddBlock(context.Context, *BlockAddRequest) (*BlockAddResponse, error)
	GetBlockedList(context.Context, *GetBlockedListRequest) (*GetBlockedListResponse, error)
	Unblock(context.Context, *UnblockRequest) (*UnblockResponse, error)
	AddLike(context.Context, *LikeAddRequest) (*LikeAddResponse, error)
	UpdateLike(context.Context, *LikeUpdateRequest) (*LikeUpdateResponse, error)
	GetLastLike(context.Context, *LikeGetLastRequest) (*LikeGetLastResponse, error)
	AddComplaint(context.Context, *ComplaintAddRequest) (*ComplaintAddResponse, error)
	UpdateCoordinates(context.Context, *NavigatorUpdateRequest) (*NavigatorUpdateResponse, error)
	AddPayment(context.Context, *PaymentAddRequest) (*PaymentAddResponse, error)
	CheckPremium(context.Context, *CheckPremiumRequest) (*CheckPremiumResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	mustEmbedUnimplementedProfileServer()
}

// UnimplementedProfileServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServer struct {
}

func (UnimplementedProfileServer) AddProfile(context.Context, *ProfileAddRequest) (*ProfileAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (UnimplementedProfileServer) UpdateProfile(context.Context, *ProfileUpdateRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServer) FreezeProfile(context.Context, *ProfileFreezeRequest) (*ProfileFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeProfile not implemented")
}
func (UnimplementedProfileServer) RestoreProfile(context.Context, *ProfileRestoreRequest) (*ProfileRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreProfile not implemented")
}
func (UnimplementedProfileServer) DeleteProfile(context.Context, *ProfileDeleteRequest) (*ProfileDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfileServer) GetProfile(context.Context, *ProfileGetRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileServer) GetProfileDetail(context.Context, *ProfileGetDetailRequest) (*ProfileDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileDetail not implemented")
}
func (UnimplementedProfileServer) GetProfileShortInfo(context.Context, *ProfileGetShortInfoRequest) (*ProfileShortInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileShortInfo not implemented")
}
func (UnimplementedProfileServer) GetProfileList(context.Context, *ProfileGetListRequest) (*ProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileList not implemented")
}
func (UnimplementedProfileServer) CheckProfileExists(context.Context, *CheckProfileExistsRequest) (*CheckProfileExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfileExists not implemented")
}
func (UnimplementedProfileServer) GetImageByTelegramUserId(context.Context, *GetImageByTelegramUserIdRequest) (*ImageByTelegramUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageByTelegramUserId not implemented")
}
func (UnimplementedProfileServer) GetImageLastByTelegramUserId(context.Context, *GetImageLastByTelegramUserIdRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageLastByTelegramUserId not implemented")
}
func (UnimplementedProfileServer) GetImageById(context.Context, *GetImageByIdRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageById not implemented")
}
func (UnimplementedProfileServer) DeleteImage(context.Context, *ImageDeleteRequest) (*ImageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedProfileServer) GetFilter(context.Context, *FilterGetRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilter not implemented")
}
func (UnimplementedProfileServer) UpdateFilter(context.Context, *FilterUpdateRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilter not implemented")
}
func (UnimplementedProfileServer) GetTelegram(context.Context, *TelegramGetRequest) (*TelegramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegram not implemented")
}
func (UnimplementedProfileServer) AddBlock(context.Context, *BlockAddRequest) (*BlockAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (UnimplementedProfileServer) GetBlockedList(context.Context, *GetBlockedListRequest) (*GetBlockedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedList not implemented")
}
func (UnimplementedProfileServer) Unblock(context.Context, *UnblockRequest) (*UnblockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unblock not implemented")
}
func (UnimplementedProfileServer) AddLike(context.Context, *LikeAddRequest) (*LikeAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedProfileServer) UpdateLike(context.Context, *LikeUpdateRequest) (*LikeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLike not implemented")
}
func (UnimplementedProfileServer) GetLastLike(context.Context, *LikeGetLastRequest) (*LikeGetLastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLike not implemented")
}
func (UnimplementedProfileServer) AddComplaint(context.Context, *ComplaintAddRequest) (*ComplaintAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComplaint not implemented")
}
func (UnimplementedProfileServer) UpdateCoordinates(context.Context, *NavigatorUpdateRequest) (*NavigatorUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoordinates not implemented")
}
func (UnimplementedProfileServer) AddPayment(context.Context, *PaymentAddRequest) (*PaymentAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPayment not implemented")
}
func (UnimplementedProfileServer) CheckPremium(context.Context, *CheckPremiumRequest) (*CheckPremiumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPremium not implemented")
}
func (UnimplementedProfileServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedProfileServer) mustEmbedUnimplementedProfileServer() {}

// UnsafeProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServer will
// result in compilation errors.
type UnsafeProfileServer interface {
	mustEmbedUnimplementedProfileServer()
}

func RegisterProfileServer(s grpc.ServiceRegistrar, srv ProfileServer) {
	s.RegisterService(&Profile_ServiceDesc, srv)
}

func _Profile_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_AddProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AddProfile(ctx, req.(*ProfileAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UpdateProfile(ctx, req.(*ProfileUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_FreezeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).FreezeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_FreezeProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).FreezeProfile(ctx, req.(*ProfileFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_RestoreProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).RestoreProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_RestoreProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).RestoreProfile(ctx, req.(*ProfileRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).DeleteProfile(ctx, req.(*ProfileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetProfile(ctx, req.(*ProfileGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetProfileDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileGetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetProfileDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetProfileDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetProfileDetail(ctx, req.(*ProfileGetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetProfileShortInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileGetShortInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetProfileShortInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetProfileShortInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetProfileShortInfo(ctx, req.(*ProfileGetShortInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetProfileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetProfileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetProfileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetProfileList(ctx, req.(*ProfileGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_CheckProfileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProfileExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).CheckProfileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_CheckProfileExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).CheckProfileExists(ctx, req.(*CheckProfileExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetImageByTelegramUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageByTelegramUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetImageByTelegramUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetImageByTelegramUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetImageByTelegramUserId(ctx, req.(*GetImageByTelegramUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetImageLastByTelegramUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageLastByTelegramUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetImageLastByTelegramUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetImageLastByTelegramUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetImageLastByTelegramUserId(ctx, req.(*GetImageLastByTelegramUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetImageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetImageById(ctx, req.(*GetImageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).DeleteImage(ctx, req.(*ImageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetFilter(ctx, req.(*FilterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_UpdateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UpdateFilter(ctx, req.(*FilterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetTelegram(ctx, req.(*TelegramGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_AddBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AddBlock(ctx, req.(*BlockAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetBlockedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetBlockedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetBlockedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetBlockedList(ctx, req.(*GetBlockedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Unblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Unblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_Unblock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Unblock(ctx, req.(*UnblockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_AddLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AddLike(ctx, req.(*LikeAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UpdateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UpdateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_UpdateLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UpdateLike(ctx, req.(*LikeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_GetLastLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeGetLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetLastLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_GetLastLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetLastLike(ctx, req.(*LikeGetLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_AddComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplaintAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AddComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_AddComplaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AddComplaint(ctx, req.(*ComplaintAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UpdateCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigatorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UpdateCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_UpdateCoordinates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UpdateCoordinates(ctx, req.(*NavigatorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_AddPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AddPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_AddPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AddPayment(ctx, req.(*PaymentAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_CheckPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).CheckPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_CheckPremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).CheckPremium(ctx, req.(*CheckPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profile_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Profile_ServiceDesc is the grpc.ServiceDesc for Profile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProfile",
			Handler:    _Profile_AddProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Profile_UpdateProfile_Handler,
		},
		{
			MethodName: "FreezeProfile",
			Handler:    _Profile_FreezeProfile_Handler,
		},
		{
			MethodName: "RestoreProfile",
			Handler:    _Profile_RestoreProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _Profile_DeleteProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Profile_GetProfile_Handler,
		},
		{
			MethodName: "GetProfileDetail",
			Handler:    _Profile_GetProfileDetail_Handler,
		},
		{
			MethodName: "GetProfileShortInfo",
			Handler:    _Profile_GetProfileShortInfo_Handler,
		},
		{
			MethodName: "GetProfileList",
			Handler:    _Profile_GetProfileList_Handler,
		},
		{
			MethodName: "CheckProfileExists",
			Handler:    _Profile_CheckProfileExists_Handler,
		},
		{
			MethodName: "GetImageByTelegramUserId",
			Handler:    _Profile_GetImageByTelegramUserId_Handler,
		},
		{
			MethodName: "GetImageLastByTelegramUserId",
			Handler:    _Profile_GetImageLastByTelegramUserId_Handler,
		},
		{
			MethodName: "GetImageById",
			Handler:    _Profile_GetImageById_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Profile_DeleteImage_Handler,
		},
		{
			MethodName: "GetFilter",
			Handler:    _Profile_GetFilter_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _Profile_UpdateFilter_Handler,
		},
		{
			MethodName: "GetTelegram",
			Handler:    _Profile_GetTelegram_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _Profile_AddBlock_Handler,
		},
		{
			MethodName: "GetBlockedList",
			Handler:    _Profile_GetBlockedList_Handler,
		},
		{
			MethodName: "Unblock",
			Handler:    _Profile_Unblock_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _Profile_AddLike_Handler,
		},
		{
			MethodName: "UpdateLike",
			Handler:    _Profile_UpdateLike_Handler,
		},
		{
			MethodName: "GetLastLike",
			Handler:    _Profile_GetLastLike_Handler,
		},
		{
			MethodName: "AddComplaint",
			Handler:    _Profile_AddComplaint_Handler,
		},
		{
			MethodName: "UpdateCoordinates",
			Handler:    _Profile_UpdateCoordinates_Handler,
		},
		{
			MethodName: "AddPayment",
			Handler:    _Profile_AddPayment_Handler,
		},
		{
			MethodName: "CheckPremium",
			Handler:    _Profile_CheckPremium_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _Profile_UpdateSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/proto/profiles/profile.proto",
}
