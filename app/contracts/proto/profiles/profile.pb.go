// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: contracts/proto/profiles/profile.proto

package profiles

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` // Имя файла
	Size     int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`        // Размер файла в байтах
	Content  []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`   // Содержимое файла в виде массива байтов
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{0}
}

func (x *FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMetadata) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileMetadata) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ImageStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked bool `protobuf:"varint,1,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"` // заблокировано изображение да/нет
	IsPrimary bool `protobuf:"varint,2,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"` // изображение является основным да/нет
	IsPrivate bool `protobuf:"varint,3,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"` // изображение является приватным да/нет
}

func (x *ImageStatusResponse) Reset() {
	*x = ImageStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageStatusResponse) ProtoMessage() {}

func (x *ImageStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageStatusResponse.ProtoReflect.Descriptor instead.
func (*ImageStatusResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{1}
}

func (x *ImageStatusResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *ImageStatusResponse) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *ImageStatusResponse) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                        // id изображения
	TelegramUserId string `protobuf:"bytes,2,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                     // название файла
	Url            string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`                       // url файла
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{2}
}

func (x *ImageResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ImageResponse) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ImageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`   // широта
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"` // долгота
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{3}
}

func (x *Point) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type NavigatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Point `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"` // объект с координатами
}

func (x *NavigatorResponse) Reset() {
	*x = NavigatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigatorResponse) ProtoMessage() {}

func (x *NavigatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigatorResponse.ProtoReflect.Descriptor instead.
func (*NavigatorResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{4}
}

func (x *NavigatorResponse) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

type NavigatorDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName *string  `protobuf:"bytes,1,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"` // название страны
	City        *string  `protobuf:"bytes,2,opt,name=city,proto3,oneof" json:"city,omitempty"`               // название города
	Distance    *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`     // расстояние до просматриваемого пользователя
}

func (x *NavigatorDetailResponse) Reset() {
	*x = NavigatorDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigatorDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigatorDetailResponse) ProtoMessage() {}

func (x *NavigatorDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigatorDetailResponse.ProtoReflect.Descriptor instead.
func (*NavigatorDetailResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{5}
}

func (x *NavigatorDetailResponse) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *NavigatorDetailResponse) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *NavigatorDetailResponse) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchGender string  `protobuf:"bytes,1,opt,name=searchGender,proto3" json:"searchGender,omitempty"` // поиск по половому признаку
	AgeFrom      uint64  `protobuf:"varint,2,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`          // возраст от`
	AgeTo        uint64  `protobuf:"varint,3,opt,name=ageTo,proto3" json:"ageTo,omitempty"`              // возраст до
	Distance     float64 `protobuf:"fixed64,4,opt,name=distance,proto3" json:"distance,omitempty"`       // дистанция
	Page         uint64  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`                // номер текущей страницы
	Size         uint64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                // количество элементов на странице
	IsLiked      bool    `protobuf:"varint,7,opt,name=isLiked,proto3" json:"isLiked,omitempty"`          // показывать пользователей у которых лайк
	IsOnline     bool    `protobuf:"varint,8,opt,name=isOnline,proto3" json:"isOnline,omitempty"`        // показывать только онлайн пользователей
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{6}
}

func (x *FilterResponse) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *FilterResponse) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *FilterResponse) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *FilterResponse) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *FilterResponse) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FilterResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FilterResponse) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *FilterResponse) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

type TelegramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                    // id пользователя
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                // username пользователя
	FirstName       string `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`              // имя пользователя
	LastName        string `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`                // фамилия пользователя
	LanguageCode    string `protobuf:"bytes,5,opt,name=languageCode,proto3" json:"languageCode,omitempty"`        // язык пользователя
	AllowsWriteToPm bool   `protobuf:"varint,6,opt,name=allowsWriteToPm,proto3" json:"allowsWriteToPm,omitempty"` // true, если этот пользователь разрешил боту отправлять ему сообщения
	QueryId         string `protobuf:"bytes,7,opt,name=queryId,proto3" json:"queryId,omitempty"`                  // id чата
}

func (x *TelegramResponse) Reset() {
	*x = TelegramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramResponse) ProtoMessage() {}

func (x *TelegramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramResponse.ProtoReflect.Descriptor instead.
func (*TelegramResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{7}
}

func (x *TelegramResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TelegramResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TelegramResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TelegramResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TelegramResponse) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TelegramResponse) GetAllowsWriteToPm() bool {
	if x != nil {
		return x.AllowsWriteToPm
	}
	return false
}

func (x *TelegramResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked        bool `protobuf:"varint,1,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"`               // заблокирован пользователь да/нет
	IsFrozen         bool `protobuf:"varint,2,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`                 // заморожен пользователь да/нет
	IsInvisible      bool `protobuf:"varint,3,opt,name=isInvisible,proto3" json:"isInvisible,omitempty"`           // неведимка да/нет
	IsPremium        bool `protobuf:"varint,4,opt,name=isPremium,proto3" json:"isPremium,omitempty"`               // наличие премиум да/нет
	IsHiddenDistance bool `protobuf:"varint,5,opt,name=isHiddenDistance,proto3" json:"isHiddenDistance,omitempty"` // показывать дистанцию до текущего пользователя да/нет
	IsHiddenAge      bool `protobuf:"varint,6,opt,name=isHiddenAge,proto3" json:"isHiddenAge,omitempty"`           // показывать возраст до текущего пользователя да/нет
	IsLeftHand       bool `protobuf:"varint,7,opt,name=isLeftHand,proto3" json:"isLeftHand,omitempty"`             // интерфейс адаптирован под леую руку да/нет
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{8}
}

func (x *StatusResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *StatusResponse) GetIsFrozen() bool {
	if x != nil {
		return x.IsFrozen
	}
	return false
}

func (x *StatusResponse) GetIsInvisible() bool {
	if x != nil {
		return x.IsInvisible
	}
	return false
}

func (x *StatusResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *StatusResponse) GetIsHiddenDistance() bool {
	if x != nil {
		return x.IsHiddenDistance
	}
	return false
}

func (x *StatusResponse) GetIsHiddenAge() bool {
	if x != nil {
		return x.IsHiddenAge
	}
	return false
}

func (x *StatusResponse) GetIsLeftHand() bool {
	if x != nil {
		return x.IsLeftHand
	}
	return false
}

type SettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurement string `protobuf:"bytes,1,opt,name=measurement,proto3" json:"measurement,omitempty"` // единицы измерения метрическая/американская
}

func (x *SettingsResponse) Reset() {
	*x = SettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse) ProtoMessage() {}

func (x *SettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse.ProtoReflect.Descriptor instead.
func (*SettingsResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{9}
}

func (x *SettingsResponse) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked bool `protobuf:"varint,1,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"` // заблокирован пользователь да/нет
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{10}
}

func (x *BlockResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

type LikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`              // id лайка
	IsLiked   bool                 `protobuf:"varint,2,opt,name=isLiked,proto3" json:"isLiked,omitempty"`    // установлен лайк да/нет
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` // дата обновления
}

func (x *LikeResponse) Reset() {
	*x = LikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeResponse) ProtoMessage() {}

func (x *LikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeResponse.ProtoReflect.Descriptor instead.
func (*LikeResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{11}
}

func (x *LikeResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LikeResponse) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *LikeResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type LikeEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // id лайка
	TelegramUserId      string               `protobuf:"bytes,2,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`           // id пользователя который лайкнул
	LikedTelegramUserId string               `protobuf:"bytes,3,opt,name=likedTelegramUserId,proto3" json:"likedTelegramUserId,omitempty"` // id пользователя которого лайкнули
	IsLiked             bool                 `protobuf:"varint,4,opt,name=isLiked,proto3" json:"isLiked,omitempty"`                        // установлен лайк да/нет
	CreatedAt           *timestamp.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                     // дата создания
	UpdatedAt           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                     // дата обновления
}

func (x *LikeEntity) Reset() {
	*x = LikeEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeEntity) ProtoMessage() {}

func (x *LikeEntity) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeEntity.ProtoReflect.Descriptor instead.
func (*LikeEntity) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{12}
}

func (x *LikeEntity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LikeEntity) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *LikeEntity) GetLikedTelegramUserId() string {
	if x != nil {
		return x.LikedTelegramUserId
	}
	return ""
}

func (x *LikeEntity) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *LikeEntity) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LikeEntity) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProfileAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName             string          `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`                           // Имя для отображения
	Age                     uint64          `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`                                          // возраст
	Gender                  string          `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`                                     // пол
	SearchGender            string          `protobuf:"bytes,4,opt,name=searchGender,proto3" json:"searchGender,omitempty"`                         // поиск по половому признаку
	Description             string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                           // описание
	TelegramUserId          string          `protobuf:"bytes,6,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`                     // id пользователя в телеграм
	TelegramUsername        string          `protobuf:"bytes,7,opt,name=telegramUsername,proto3" json:"telegramUsername,omitempty"`                 // username пользователя в телеграм
	TelegramFirstName       string          `protobuf:"bytes,8,opt,name=telegramFirstName,proto3" json:"telegramFirstName,omitempty"`               // имя пользователя в телеграм
	TelegramLastName        string          `protobuf:"bytes,9,opt,name=telegramLastName,proto3" json:"telegramLastName,omitempty"`                 // фамилия пользователя в телеграм
	TelegramLanguageCode    string          `protobuf:"bytes,10,opt,name=telegramLanguageCode,proto3" json:"telegramLanguageCode,omitempty"`        // язык пользователя в телеграм
	TelegramAllowsWriteToPm bool            `protobuf:"varint,11,opt,name=telegramAllowsWriteToPm,proto3" json:"telegramAllowsWriteToPm,omitempty"` // true, если этот пользователь разрешил боту отправлять ему сообщения
	TelegramQueryId         string          `protobuf:"bytes,12,opt,name=telegramQueryId,proto3" json:"telegramQueryId,omitempty"`                  // id чата в телеграм
	CountryCode             *string         `protobuf:"bytes,13,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"`                    // код страны
	CountryName             *string         `protobuf:"bytes,14,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"`                    // название страны
	City                    *string         `protobuf:"bytes,15,opt,name=city,proto3,oneof" json:"city,omitempty"`                                  // название города
	Latitude                *float64        `protobuf:"fixed64,16,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`                        // широта
	Longitude               *float64        `protobuf:"fixed64,17,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`                      // долгота
	AgeFrom                 uint64          `protobuf:"varint,18,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`                                 // возраст от
	AgeTo                   uint64          `protobuf:"varint,19,opt,name=ageTo,proto3" json:"ageTo,omitempty"`                                     // возраст до
	Distance                float64         `protobuf:"fixed64,20,opt,name=distance,proto3" json:"distance,omitempty"`                              // дистанция
	Page                    uint64          `protobuf:"varint,21,opt,name=page,proto3" json:"page,omitempty"`                                       // номер текущей страницы
	Size                    uint64          `protobuf:"varint,22,opt,name=size,proto3" json:"size,omitempty"`                                       // количество элементов на странице
	IsLiked                 bool            `protobuf:"varint,23,opt,name=isLiked,proto3" json:"isLiked,omitempty"`                                 // показывать пользователей у которых лайк
	IsOnline                bool            `protobuf:"varint,24,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                               // показывать только онлайн пользователей
	IsLeftHand              bool            `protobuf:"varint,25,opt,name=isLeftHand,proto3" json:"isLeftHand,omitempty"`                           // интерфейс адаптирован под леую руку да/нет
	Measurement             string          `protobuf:"bytes,26,opt,name=measurement,proto3" json:"measurement,omitempty"`                          // единицы измерения метрическая/американская
	Files                   []*FileMetadata `protobuf:"bytes,27,rep,name=files,proto3" json:"files,omitempty"`                                      // список файлов-изображений
}

func (x *ProfileAddRequest) Reset() {
	*x = ProfileAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileAddRequest) ProtoMessage() {}

func (x *ProfileAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileAddRequest.ProtoReflect.Descriptor instead.
func (*ProfileAddRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{13}
}

func (x *ProfileAddRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileAddRequest) GetAge() uint64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ProfileAddRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileAddRequest) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *ProfileAddRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramFirstName() string {
	if x != nil {
		return x.TelegramFirstName
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramLastName() string {
	if x != nil {
		return x.TelegramLastName
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramLanguageCode() string {
	if x != nil {
		return x.TelegramLanguageCode
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramAllowsWriteToPm() bool {
	if x != nil {
		return x.TelegramAllowsWriteToPm
	}
	return false
}

func (x *ProfileAddRequest) GetTelegramQueryId() string {
	if x != nil {
		return x.TelegramQueryId
	}
	return ""
}

func (x *ProfileAddRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ProfileAddRequest) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *ProfileAddRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ProfileAddRequest) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ProfileAddRequest) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *ProfileAddRequest) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *ProfileAddRequest) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *ProfileAddRequest) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *ProfileAddRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProfileAddRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProfileAddRequest) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *ProfileAddRequest) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *ProfileAddRequest) GetIsLeftHand() bool {
	if x != nil {
		return x.IsLeftHand
	}
	return false
}

func (x *ProfileAddRequest) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *ProfileAddRequest) GetFiles() []*FileMetadata {
	if x != nil {
		return x.Files
	}
	return nil
}

type ProfileAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно добавлен да/нет
}

func (x *ProfileAddResponse) Reset() {
	*x = ProfileAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileAddResponse) ProtoMessage() {}

func (x *ProfileAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileAddResponse.ProtoReflect.Descriptor instead.
func (*ProfileAddResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{14}
}

func (x *ProfileAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ProfileUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName             string          `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`                           // Имя для отображения
	Age                     uint64          `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`                                          // возраст
	Gender                  string          `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`                                     // пол
	SearchGender            string          `protobuf:"bytes,4,opt,name=searchGender,proto3" json:"searchGender,omitempty"`                         // поиск по половому признаку
	Description             string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                           // описание
	TelegramUserId          string          `protobuf:"bytes,6,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`                     // id пользователя в телеграм
	TelegramUsername        string          `protobuf:"bytes,7,opt,name=telegramUsername,proto3" json:"telegramUsername,omitempty"`                 // username пользователя в телеграм
	TelegramFirstName       string          `protobuf:"bytes,8,opt,name=telegramFirstName,proto3" json:"telegramFirstName,omitempty"`               // имя пользователя в телеграм
	TelegramLastName        string          `protobuf:"bytes,9,opt,name=telegramLastName,proto3" json:"telegramLastName,omitempty"`                 // фамилия пользователя в телеграм
	TelegramLanguageCode    string          `protobuf:"bytes,10,opt,name=telegramLanguageCode,proto3" json:"telegramLanguageCode,omitempty"`        // язык пользователя в телеграм
	TelegramAllowsWriteToPm bool            `protobuf:"varint,11,opt,name=telegramAllowsWriteToPm,proto3" json:"telegramAllowsWriteToPm,omitempty"` // true, если этот пользователь разрешил боту отправлять ему сообщения
	TelegramQueryId         string          `protobuf:"bytes,12,opt,name=telegramQueryId,proto3" json:"telegramQueryId,omitempty"`                  // id чата в телеграм
	CountryCode             *string         `protobuf:"bytes,13,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"`                    // код страны
	CountryName             *string         `protobuf:"bytes,14,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"`                    // название страны
	City                    *string         `protobuf:"bytes,15,opt,name=city,proto3,oneof" json:"city,omitempty"`                                  // название города
	Latitude                *float64        `protobuf:"fixed64,16,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`                        // широта
	Longitude               *float64        `protobuf:"fixed64,17,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`                      // долгота
	AgeFrom                 uint64          `protobuf:"varint,18,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`                                 // возраст от
	AgeTo                   uint64          `protobuf:"varint,19,opt,name=ageTo,proto3" json:"ageTo,omitempty"`                                     // возраст до
	Distance                float64         `protobuf:"fixed64,20,opt,name=distance,proto3" json:"distance,omitempty"`                              // дистанция
	Page                    uint64          `protobuf:"varint,21,opt,name=page,proto3" json:"page,omitempty"`                                       // номер текущей страницы
	Size                    uint64          `protobuf:"varint,22,opt,name=size,proto3" json:"size,omitempty"`                                       // количество элементов на странице
	IsLiked                 bool            `protobuf:"varint,23,opt,name=isLiked,proto3" json:"isLiked,omitempty"`                                 // показывать пользователей у которых лайк
	IsOnline                bool            `protobuf:"varint,24,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                               // показывать только онлайн пользователей
	IsImages                bool            `protobuf:"varint,25,opt,name=isImages,proto3" json:"isImages,omitempty"`                               // наличие ранее сохранненых фотографий
	Measurement             string          `protobuf:"bytes,26,opt,name=measurement,proto3" json:"measurement,omitempty"`                          // единицы измерения метрическая/американская
	Files                   []*FileMetadata `protobuf:"bytes,27,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ProfileUpdateRequest) Reset() {
	*x = ProfileUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileUpdateRequest) ProtoMessage() {}

func (x *ProfileUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProfileUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{15}
}

func (x *ProfileUpdateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetAge() uint64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ProfileUpdateRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileUpdateRequest) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *ProfileUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramFirstName() string {
	if x != nil {
		return x.TelegramFirstName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramLastName() string {
	if x != nil {
		return x.TelegramLastName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramLanguageCode() string {
	if x != nil {
		return x.TelegramLanguageCode
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramAllowsWriteToPm() bool {
	if x != nil {
		return x.TelegramAllowsWriteToPm
	}
	return false
}

func (x *ProfileUpdateRequest) GetTelegramQueryId() string {
	if x != nil {
		return x.TelegramQueryId
	}
	return ""
}

func (x *ProfileUpdateRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ProfileUpdateRequest) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ProfileUpdateRequest) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ProfileUpdateRequest) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *ProfileUpdateRequest) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *ProfileUpdateRequest) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *ProfileUpdateRequest) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *ProfileUpdateRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProfileUpdateRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProfileUpdateRequest) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *ProfileUpdateRequest) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *ProfileUpdateRequest) GetIsImages() bool {
	if x != nil {
		return x.IsImages
	}
	return false
}

func (x *ProfileUpdateRequest) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *ProfileUpdateRequest) GetFiles() []*FileMetadata {
	if x != nil {
		return x.Files
	}
	return nil
}

type ProfileFreezeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *ProfileFreezeRequest) Reset() {
	*x = ProfileFreezeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileFreezeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileFreezeRequest) ProtoMessage() {}

func (x *ProfileFreezeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileFreezeRequest.ProtoReflect.Descriptor instead.
func (*ProfileFreezeRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{16}
}

func (x *ProfileFreezeRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type ProfileFreezeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно заморожен да/нет
}

func (x *ProfileFreezeResponse) Reset() {
	*x = ProfileFreezeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileFreezeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileFreezeResponse) ProtoMessage() {}

func (x *ProfileFreezeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileFreezeResponse.ProtoReflect.Descriptor instead.
func (*ProfileFreezeResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{17}
}

func (x *ProfileFreezeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ProfileRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *ProfileRestoreRequest) Reset() {
	*x = ProfileRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRestoreRequest) ProtoMessage() {}

func (x *ProfileRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRestoreRequest.ProtoReflect.Descriptor instead.
func (*ProfileRestoreRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{18}
}

func (x *ProfileRestoreRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type ProfileRestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно восстановлен да/нет
}

func (x *ProfileRestoreResponse) Reset() {
	*x = ProfileRestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRestoreResponse) ProtoMessage() {}

func (x *ProfileRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRestoreResponse.ProtoReflect.Descriptor instead.
func (*ProfileRestoreResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{19}
}

func (x *ProfileRestoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ProfileDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *ProfileDeleteRequest) Reset() {
	*x = ProfileDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDeleteRequest) ProtoMessage() {}

func (x *ProfileDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDeleteRequest.ProtoReflect.Descriptor instead.
func (*ProfileDeleteRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{20}
}

func (x *ProfileDeleteRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type ProfileDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно удалено да/нет
}

func (x *ProfileDeleteResponse) Reset() {
	*x = ProfileDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDeleteResponse) ProtoMessage() {}

func (x *ProfileDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDeleteResponse.ProtoReflect.Descriptor instead.
func (*ProfileDeleteResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{21}
}

func (x *ProfileDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ProfileGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string   `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	CountryCode    *string  `protobuf:"bytes,2,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"` // код страны
	CountryName    *string  `protobuf:"bytes,3,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"` // название страны
	City           *string  `protobuf:"bytes,4,opt,name=city,proto3,oneof" json:"city,omitempty"`               // название города
	Latitude       *float64 `protobuf:"fixed64,5,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`     // широта
	Longitude      *float64 `protobuf:"fixed64,6,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`   // долгота
}

func (x *ProfileGetRequest) Reset() {
	*x = ProfileGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetRequest) ProtoMessage() {}

func (x *ProfileGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetRequest.ProtoReflect.Descriptor instead.
func (*ProfileGetRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{22}
}

func (x *ProfileGetRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileGetRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ProfileGetRequest) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *ProfileGetRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ProfileGetRequest) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ProfileGetRequest) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

type ProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string             `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	DisplayName    string             `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`       // Имя для отображения
	Age            uint64             `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`                      // возраст
	Gender         string             `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`                 // пол
	Description    string             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`       // описание
	Navigator      *NavigatorResponse `protobuf:"bytes,6,opt,name=navigator,proto3" json:"navigator,omitempty"`           // объект навигатор
	Filter         *FilterResponse    `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`                 // объект фильтр
	Status         *StatusResponse    `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                 // статус пользователя
	Settings       *SettingsResponse  `protobuf:"bytes,9,opt,name=settings,proto3" json:"settings,omitempty"`             // статус пользователя
	Images         []*ImageResponse   `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`                // список изображений
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{23}
}

func (x *ProfileResponse) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileResponse) GetAge() uint64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ProfileResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileResponse) GetNavigator() *NavigatorResponse {
	if x != nil {
		return x.Navigator
	}
	return nil
}

func (x *ProfileResponse) GetFilter() *FilterResponse {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ProfileResponse) GetStatus() *StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProfileResponse) GetSettings() *SettingsResponse {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProfileResponse) GetImages() []*ImageResponse {
	if x != nil {
		return x.Images
	}
	return nil
}

type ProfileGetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId       string   `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`             // id пользователя в телеграм
	ViewedTelegramUserId string   `protobuf:"bytes,2,opt,name=viewedTelegramUserId,proto3" json:"viewedTelegramUserId,omitempty"` // id сессии того, кого смотрим
	CountryCode          *string  `protobuf:"bytes,3,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"`             // код страны
	CountryName          *string  `protobuf:"bytes,4,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"`             // название страны
	City                 *string  `protobuf:"bytes,5,opt,name=city,proto3,oneof" json:"city,omitempty"`                           // название города
	Latitude             *float64 `protobuf:"fixed64,6,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`                 // широта
	Longitude            *float64 `protobuf:"fixed64,7,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`               // долгота
}

func (x *ProfileGetDetailRequest) Reset() {
	*x = ProfileGetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetDetailRequest) ProtoMessage() {}

func (x *ProfileGetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetDetailRequest.ProtoReflect.Descriptor instead.
func (*ProfileGetDetailRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{24}
}

func (x *ProfileGetDetailRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetViewedTelegramUserId() string {
	if x != nil {
		return x.ViewedTelegramUserId
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ProfileGetDetailRequest) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

type ProfileDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string                   `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	DisplayName    string                   `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`       // Имя для отображения
	Age            uint64                   `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`                      // возраст
	Gender         string                   `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`                 // пол
	Description    string                   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`       // описание
	LastOnline     *timestamp.Timestamp     `protobuf:"bytes,6,opt,name=lastOnline,proto3" json:"lastOnline,omitempty"`         // дата последнего входа в систему
	Navigator      *NavigatorDetailResponse `protobuf:"bytes,7,opt,name=navigator,proto3" json:"navigator,omitempty"`           // объект навигатор
	Status         *StatusResponse          `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                 // статус пользователя
	Settings       *SettingsResponse        `protobuf:"bytes,9,opt,name=settings,proto3" json:"settings,omitempty"`             // статус пользователя
	Block          *BlockResponse           `protobuf:"bytes,10,opt,name=block,proto3" json:"block,omitempty"`                  // объект блок
	Like           *LikeResponse            `protobuf:"bytes,11,opt,name=like,proto3" json:"like,omitempty"`                    //  объект дайк
	Images         []*ImageResponse         `protobuf:"bytes,12,rep,name=images,proto3" json:"images,omitempty"`                // список изображений
}

func (x *ProfileDetailResponse) Reset() {
	*x = ProfileDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDetailResponse) ProtoMessage() {}

func (x *ProfileDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDetailResponse.ProtoReflect.Descriptor instead.
func (*ProfileDetailResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{25}
}

func (x *ProfileDetailResponse) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileDetailResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileDetailResponse) GetAge() uint64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ProfileDetailResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileDetailResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileDetailResponse) GetLastOnline() *timestamp.Timestamp {
	if x != nil {
		return x.LastOnline
	}
	return nil
}

func (x *ProfileDetailResponse) GetNavigator() *NavigatorDetailResponse {
	if x != nil {
		return x.Navigator
	}
	return nil
}

func (x *ProfileDetailResponse) GetStatus() *StatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProfileDetailResponse) GetSettings() *SettingsResponse {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProfileDetailResponse) GetBlock() *BlockResponse {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ProfileDetailResponse) GetLike() *LikeResponse {
	if x != nil {
		return x.Like
	}
	return nil
}

func (x *ProfileDetailResponse) GetImages() []*ImageResponse {
	if x != nil {
		return x.Images
	}
	return nil
}

type ProfileGetShortInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *ProfileGetShortInfoRequest) Reset() {
	*x = ProfileGetShortInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetShortInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetShortInfoRequest) ProtoMessage() {}

func (x *ProfileGetShortInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetShortInfoRequest.ProtoReflect.Descriptor instead.
func (*ProfileGetShortInfoRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{26}
}

func (x *ProfileGetShortInfoRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type ProfileShortInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string               `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	IsBlocked      bool                 `protobuf:"varint,2,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"`          // заблокирован пользователь да/нет
	IsFrozen       bool                 `protobuf:"varint,3,opt,name=isFrozen,proto3" json:"isFrozen,omitempty"`            // заморожен пользователь да/нет
	IsPremium      bool                 `protobuf:"varint,4,opt,name=isPremium,proto3" json:"isPremium,omitempty"`          // активирован премиум аккаунт да/нет
	AvailableUntil *timestamp.Timestamp `protobuf:"bytes,5,opt,name=availableUntil,proto3" json:"availableUntil,omitempty"` // премиум действует до
	LanguageCode   string               `protobuf:"bytes,6,opt,name=languageCode,proto3" json:"languageCode,omitempty"`     // язык пользователя
	Measurement    string               `protobuf:"bytes,7,opt,name=measurement,proto3" json:"measurement,omitempty"`       // единицы измерения метрическая/американская
	Filter         *FilterResponse      `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`                 // объект фильтр
}

func (x *ProfileShortInfoResponse) Reset() {
	*x = ProfileShortInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileShortInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileShortInfoResponse) ProtoMessage() {}

func (x *ProfileShortInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileShortInfoResponse.ProtoReflect.Descriptor instead.
func (*ProfileShortInfoResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{27}
}

func (x *ProfileShortInfoResponse) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileShortInfoResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *ProfileShortInfoResponse) GetIsFrozen() bool {
	if x != nil {
		return x.IsFrozen
	}
	return false
}

func (x *ProfileShortInfoResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *ProfileShortInfoResponse) GetAvailableUntil() *timestamp.Timestamp {
	if x != nil {
		return x.AvailableUntil
	}
	return nil
}

func (x *ProfileShortInfoResponse) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *ProfileShortInfoResponse) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *ProfileShortInfoResponse) GetFilter() *FilterResponse {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ProfileGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string   `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	CountryCode    *string  `protobuf:"bytes,2,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"` // код страны
	CountryName    *string  `protobuf:"bytes,3,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"` // название страны
	City           *string  `protobuf:"bytes,4,opt,name=city,proto3,oneof" json:"city,omitempty"`               // название города
	Latitude       *float64 `protobuf:"fixed64,5,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`     // широта
	Longitude      *float64 `protobuf:"fixed64,6,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`   // долгота
}

func (x *ProfileGetListRequest) Reset() {
	*x = ProfileGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetListRequest) ProtoMessage() {}

func (x *ProfileGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetListRequest.ProtoReflect.Descriptor instead.
func (*ProfileGetListRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{28}
}

func (x *ProfileGetListRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileGetListRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ProfileGetListRequest) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *ProfileGetListRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ProfileGetListRequest) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ProfileGetListRequest) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

type ProfileListItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string               `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	Distance       *float64             `protobuf:"fixed64,2,opt,name=distance,proto3,oneof" json:"distance,omitempty"`     // дистанция
	Url            string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                       // url изображения
	IsLiked        bool                 `protobuf:"varint,4,opt,name=isLiked,proto3" json:"isLiked,omitempty"`              // имеет лайк да/нет
	LastOnline     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastOnline,proto3" json:"lastOnline,omitempty"`         // дата последнего входа в систему
}

func (x *ProfileListItemResponse) Reset() {
	*x = ProfileListItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileListItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileListItemResponse) ProtoMessage() {}

func (x *ProfileListItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileListItemResponse.ProtoReflect.Descriptor instead.
func (*ProfileListItemResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{29}
}

func (x *ProfileListItemResponse) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ProfileListItemResponse) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *ProfileListItemResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ProfileListItemResponse) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *ProfileListItemResponse) GetLastOnline() *timestamp.Timestamp {
	if x != nil {
		return x.LastOnline
	}
	return nil
}

type ProfileListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasPrevious   bool                       `protobuf:"varint,1,opt,name=hasPrevious,proto3" json:"hasPrevious,omitempty"`     // наличие предыдущих страниц да/нет
	HasNext       bool                       `protobuf:"varint,2,opt,name=hasNext,proto3" json:"hasNext,omitempty"`             // наличие следующих страниц да/нет
	Page          uint64                     `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                   // номер текущей страницы
	Size          uint64                     `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                   // количество элементов на странице
	TotalEntities uint64                     `protobuf:"varint,5,opt,name=totalEntities,proto3" json:"totalEntities,omitempty"` // общее количество элементов
	TotalPages    uint64                     `protobuf:"varint,6,opt,name=totalPages,proto3" json:"totalPages,omitempty"`       // общее количество страниц
	Content       []*ProfileListItemResponse `protobuf:"bytes,7,rep,name=content,proto3" json:"content,omitempty"`              // список профилей
}

func (x *ProfileListResponse) Reset() {
	*x = ProfileListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileListResponse) ProtoMessage() {}

func (x *ProfileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileListResponse.ProtoReflect.Descriptor instead.
func (*ProfileListResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{30}
}

func (x *ProfileListResponse) GetHasPrevious() bool {
	if x != nil {
		return x.HasPrevious
	}
	return false
}

func (x *ProfileListResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *ProfileListResponse) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProfileListResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProfileListResponse) GetTotalEntities() uint64 {
	if x != nil {
		return x.TotalEntities
	}
	return 0
}

func (x *ProfileListResponse) GetTotalPages() uint64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ProfileListResponse) GetContent() []*ProfileListItemResponse {
	if x != nil {
		return x.Content
	}
	return nil
}

type CheckProfileExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *CheckProfileExistsRequest) Reset() {
	*x = CheckProfileExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProfileExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProfileExistsRequest) ProtoMessage() {}

func (x *CheckProfileExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProfileExistsRequest.ProtoReflect.Descriptor instead.
func (*CheckProfileExistsRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{31}
}

func (x *CheckProfileExistsRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type CheckProfileExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExists bool `protobuf:"varint,1,opt,name=isExists,proto3" json:"isExists,omitempty"` // существует аккаунт да/нет
}

func (x *CheckProfileExistsResponse) Reset() {
	*x = CheckProfileExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProfileExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProfileExistsResponse) ProtoMessage() {}

func (x *CheckProfileExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProfileExistsResponse.ProtoReflect.Descriptor instead.
func (*CheckProfileExistsResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{32}
}

func (x *CheckProfileExistsResponse) GetIsExists() bool {
	if x != nil {
		return x.IsExists
	}
	return false
}

type GetImageByTelegramUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	FileName       string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`             // название файла с расширением
}

func (x *GetImageByTelegramUserIdRequest) Reset() {
	*x = GetImageByTelegramUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageByTelegramUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageByTelegramUserIdRequest) ProtoMessage() {}

func (x *GetImageByTelegramUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageByTelegramUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetImageByTelegramUserIdRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{33}
}

func (x *GetImageByTelegramUserIdRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *GetImageByTelegramUserIdRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ImageByTelegramUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"` // файл
}

func (x *ImageByTelegramUserIdResponse) Reset() {
	*x = ImageByTelegramUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageByTelegramUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageByTelegramUserIdResponse) ProtoMessage() {}

func (x *ImageByTelegramUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageByTelegramUserIdResponse.ProtoReflect.Descriptor instead.
func (*ImageByTelegramUserIdResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{34}
}

func (x *ImageByTelegramUserIdResponse) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type GetImageLastByTelegramUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *GetImageLastByTelegramUserIdRequest) Reset() {
	*x = GetImageLastByTelegramUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageLastByTelegramUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageLastByTelegramUserIdRequest) ProtoMessage() {}

func (x *GetImageLastByTelegramUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageLastByTelegramUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetImageLastByTelegramUserIdRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{35}
}

func (x *GetImageLastByTelegramUserIdRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type GetImageByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id изображения
}

func (x *GetImageByIdRequest) Reset() {
	*x = GetImageByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageByIdRequest) ProtoMessage() {}

func (x *GetImageByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageByIdRequest.ProtoReflect.Descriptor instead.
func (*GetImageByIdRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{36}
}

func (x *GetImageByIdRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ImageDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id файла
}

func (x *ImageDeleteRequest) Reset() {
	*x = ImageDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDeleteRequest) ProtoMessage() {}

func (x *ImageDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDeleteRequest.ProtoReflect.Descriptor instead.
func (*ImageDeleteRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{37}
}

func (x *ImageDeleteRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ImageDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно удаление файла да/нет
}

func (x *ImageDeleteResponse) Reset() {
	*x = ImageDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDeleteResponse) ProtoMessage() {}

func (x *ImageDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDeleteResponse.ProtoReflect.Descriptor instead.
func (*ImageDeleteResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{38}
}

func (x *ImageDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FilterGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *FilterGetRequest) Reset() {
	*x = FilterGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterGetRequest) ProtoMessage() {}

func (x *FilterGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterGetRequest.ProtoReflect.Descriptor instead.
func (*FilterGetRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{39}
}

func (x *FilterGetRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type FilterUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string  `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	SearchGender   string  `protobuf:"bytes,2,opt,name=searchGender,proto3" json:"searchGender,omitempty"`     // поиск по половому признаку
	AgeFrom        uint64  `protobuf:"varint,3,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`              // возраст от
	AgeTo          uint64  `protobuf:"varint,4,opt,name=ageTo,proto3" json:"ageTo,omitempty"`                  // возраст до
	Distance       float64 `protobuf:"fixed64,5,opt,name=distance,proto3" json:"distance,omitempty"`           // дистанция
	IsLiked        bool    `protobuf:"varint,6,opt,name=isLiked,proto3" json:"isLiked,omitempty"`              // показывать пользователей у которых лайк
	IsOnline       bool    `protobuf:"varint,7,opt,name=isOnline,proto3" json:"isOnline,omitempty"`            // показывать только онлайн пользователей
}

func (x *FilterUpdateRequest) Reset() {
	*x = FilterUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUpdateRequest) ProtoMessage() {}

func (x *FilterUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUpdateRequest.ProtoReflect.Descriptor instead.
func (*FilterUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{40}
}

func (x *FilterUpdateRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *FilterUpdateRequest) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *FilterUpdateRequest) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *FilterUpdateRequest) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *FilterUpdateRequest) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *FilterUpdateRequest) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *FilterUpdateRequest) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

type TelegramGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *TelegramGetRequest) Reset() {
	*x = TelegramGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramGetRequest) ProtoMessage() {}

func (x *TelegramGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramGetRequest.ProtoReflect.Descriptor instead.
func (*TelegramGetRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{41}
}

func (x *TelegramGetRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type BlockAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId        string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`               // id пользователя в телеграм
	BlockedTelegramUserId string `protobuf:"bytes,2,opt,name=blockedTelegramUserId,proto3" json:"blockedTelegramUserId,omitempty"` // id того, кого блокируем
}

func (x *BlockAddRequest) Reset() {
	*x = BlockAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAddRequest) ProtoMessage() {}

func (x *BlockAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAddRequest.ProtoReflect.Descriptor instead.
func (*BlockAddRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{42}
}

func (x *BlockAddRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *BlockAddRequest) GetBlockedTelegramUserId() string {
	if x != nil {
		return x.BlockedTelegramUserId
	}
	return ""
}

type BlockAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно заблокирован да/нет
}

func (x *BlockAddResponse) Reset() {
	*x = BlockAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAddResponse) ProtoMessage() {}

func (x *BlockAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAddResponse.ProtoReflect.Descriptor instead.
func (*BlockAddResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{43}
}

func (x *BlockAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetBlockedListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *GetBlockedListRequest) Reset() {
	*x = GetBlockedListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedListRequest) ProtoMessage() {}

func (x *GetBlockedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedListRequest.ProtoReflect.Descriptor instead.
func (*GetBlockedListRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{44}
}

func (x *GetBlockedListRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type BlockedListItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedTelegramUserId string `protobuf:"bytes,1,opt,name=blockedTelegramUserId,proto3" json:"blockedTelegramUserId,omitempty"` // id пользователя в телеграм
	Url                   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                     // url изображения
}

func (x *BlockedListItemResponse) Reset() {
	*x = BlockedListItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedListItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedListItemResponse) ProtoMessage() {}

func (x *BlockedListItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedListItemResponse.ProtoReflect.Descriptor instead.
func (*BlockedListItemResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{45}
}

func (x *BlockedListItemResponse) GetBlockedTelegramUserId() string {
	if x != nil {
		return x.BlockedTelegramUserId
	}
	return ""
}

func (x *BlockedListItemResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetBlockedListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*BlockedListItemResponse `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"` // список заблокированных пользователей
}

func (x *GetBlockedListResponse) Reset() {
	*x = GetBlockedListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedListResponse) ProtoMessage() {}

func (x *GetBlockedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedListResponse.ProtoReflect.Descriptor instead.
func (*GetBlockedListResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{46}
}

func (x *GetBlockedListResponse) GetContent() []*BlockedListItemResponse {
	if x != nil {
		return x.Content
	}
	return nil
}

type UnblockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId        string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`               // id пользователя в телеграм
	BlockedTelegramUserId string `protobuf:"bytes,2,opt,name=blockedTelegramUserId,proto3" json:"blockedTelegramUserId,omitempty"` // id пользователя в телеграм которого следует разблокировать
}

func (x *UnblockRequest) Reset() {
	*x = UnblockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockRequest) ProtoMessage() {}

func (x *UnblockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockRequest.ProtoReflect.Descriptor instead.
func (*UnblockRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{47}
}

func (x *UnblockRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *UnblockRequest) GetBlockedTelegramUserId() string {
	if x != nil {
		return x.BlockedTelegramUserId
	}
	return ""
}

type UnblockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно разблокирован да/нет
}

func (x *UnblockResponse) Reset() {
	*x = UnblockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockResponse) ProtoMessage() {}

func (x *UnblockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockResponse.ProtoReflect.Descriptor instead.
func (*UnblockResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{48}
}

func (x *UnblockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LikeAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId      string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`           // id пользователя в телеграм
	LikedTelegramUserId string `protobuf:"bytes,2,opt,name=likedTelegramUserId,proto3" json:"likedTelegramUserId,omitempty"` // id пользователя который понравился
	Locale              string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`                           // локаль пользователя
}

func (x *LikeAddRequest) Reset() {
	*x = LikeAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeAddRequest) ProtoMessage() {}

func (x *LikeAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeAddRequest.ProtoReflect.Descriptor instead.
func (*LikeAddRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{49}
}

func (x *LikeAddRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *LikeAddRequest) GetLikedTelegramUserId() string {
	if x != nil {
		return x.LikedTelegramUserId
	}
	return ""
}

func (x *LikeAddRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type LikeAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно добавлен да/нет
}

func (x *LikeAddResponse) Reset() {
	*x = LikeAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeAddResponse) ProtoMessage() {}

func (x *LikeAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeAddResponse.ProtoReflect.Descriptor instead.
func (*LikeAddResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{50}
}

func (x *LikeAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LikeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                        // id блока
	TelegramUserId string `protobuf:"bytes,2,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	IsLiked        bool   `protobuf:"varint,3,opt,name=isLiked,proto3" json:"isLiked,omitempty"`              // есть лайк да/нет
}

func (x *LikeUpdateRequest) Reset() {
	*x = LikeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeUpdateRequest) ProtoMessage() {}

func (x *LikeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeUpdateRequest.ProtoReflect.Descriptor instead.
func (*LikeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{51}
}

func (x *LikeUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LikeUpdateRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *LikeUpdateRequest) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

type LikeUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно обновлен да/нет
}

func (x *LikeUpdateResponse) Reset() {
	*x = LikeUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeUpdateResponse) ProtoMessage() {}

func (x *LikeUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeUpdateResponse.ProtoReflect.Descriptor instead.
func (*LikeUpdateResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{52}
}

func (x *LikeUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LikeGetLastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя
}

func (x *LikeGetLastRequest) Reset() {
	*x = LikeGetLastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeGetLastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeGetLastRequest) ProtoMessage() {}

func (x *LikeGetLastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeGetLastRequest.ProtoReflect.Descriptor instead.
func (*LikeGetLastRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{53}
}

func (x *LikeGetLastRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type LikeGetLastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Like *LikeEntity `protobuf:"bytes,1,opt,name=like,proto3" json:"like,omitempty"` // лайк пользователя
}

func (x *LikeGetLastResponse) Reset() {
	*x = LikeGetLastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeGetLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeGetLastResponse) ProtoMessage() {}

func (x *LikeGetLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeGetLastResponse.ProtoReflect.Descriptor instead.
func (*LikeGetLastResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{54}
}

func (x *LikeGetLastResponse) GetLike() *LikeEntity {
	if x != nil {
		return x.Like
	}
	return nil
}

type ComplaintAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId         string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`                 // id пользователя в телеграм
	CriminalTelegramUserId string `protobuf:"bytes,2,opt,name=criminalTelegramUserId,proto3" json:"criminalTelegramUserId,omitempty"` // id мошенника
	Type                   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                     // тип жалобы
	Description            string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                       // описание жалобы
}

func (x *ComplaintAddRequest) Reset() {
	*x = ComplaintAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintAddRequest) ProtoMessage() {}

func (x *ComplaintAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintAddRequest.ProtoReflect.Descriptor instead.
func (*ComplaintAddRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{55}
}

func (x *ComplaintAddRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *ComplaintAddRequest) GetCriminalTelegramUserId() string {
	if x != nil {
		return x.CriminalTelegramUserId
	}
	return ""
}

func (x *ComplaintAddRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ComplaintAddRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ComplaintAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно заблокирован да/нет
}

func (x *ComplaintAddResponse) Reset() {
	*x = ComplaintAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintAddResponse) ProtoMessage() {}

func (x *ComplaintAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintAddResponse.ProtoReflect.Descriptor instead.
func (*ComplaintAddResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{56}
}

func (x *ComplaintAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetStatusByTelegramUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *GetStatusByTelegramUserIdRequest) Reset() {
	*x = GetStatusByTelegramUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusByTelegramUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusByTelegramUserIdRequest) ProtoMessage() {}

func (x *GetStatusByTelegramUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusByTelegramUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetStatusByTelegramUserIdRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{57}
}

func (x *GetStatusByTelegramUserIdRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type PaymentAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	Price          string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                   // стоимость платежа
	Currency       string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`             // валюта
	Tariff         string `protobuf:"bytes,4,opt,name=tariff,proto3" json:"tariff,omitempty"`                 // тариф
}

func (x *PaymentAddRequest) Reset() {
	*x = PaymentAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAddRequest) ProtoMessage() {}

func (x *PaymentAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAddRequest.ProtoReflect.Descriptor instead.
func (*PaymentAddRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{58}
}

func (x *PaymentAddRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *PaymentAddRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PaymentAddRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentAddRequest) GetTariff() string {
	if x != nil {
		return x.Tariff
	}
	return ""
}

type PaymentAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно оплачено да/нет
}

func (x *PaymentAddResponse) Reset() {
	*x = PaymentAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAddResponse) ProtoMessage() {}

func (x *PaymentAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAddResponse.ProtoReflect.Descriptor instead.
func (*PaymentAddResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{59}
}

func (x *PaymentAddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CheckPremiumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
}

func (x *CheckPremiumRequest) Reset() {
	*x = CheckPremiumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPremiumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPremiumRequest) ProtoMessage() {}

func (x *CheckPremiumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPremiumRequest.ProtoReflect.Descriptor instead.
func (*CheckPremiumRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{60}
}

func (x *CheckPremiumRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

type CheckPremiumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPremium      bool                 `protobuf:"varint,1,opt,name=isPremium,proto3" json:"isPremium,omitempty"`          // активирован премиум аккаунт да/нет
	AvailableUntil *timestamp.Timestamp `protobuf:"bytes,2,opt,name=availableUntil,proto3" json:"availableUntil,omitempty"` // премиум действует до
}

func (x *CheckPremiumResponse) Reset() {
	*x = CheckPremiumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPremiumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPremiumResponse) ProtoMessage() {}

func (x *CheckPremiumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPremiumResponse.ProtoReflect.Descriptor instead.
func (*CheckPremiumResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{61}
}

func (x *CheckPremiumResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *CheckPremiumResponse) GetAvailableUntil() *timestamp.Timestamp {
	if x != nil {
		return x.AvailableUntil
	}
	return nil
}

type NavigatorUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string  `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	CountryCode    *string `protobuf:"bytes,2,opt,name=countryCode,proto3,oneof" json:"countryCode,omitempty"` // код страны
	CountryName    *string `protobuf:"bytes,3,opt,name=countryName,proto3,oneof" json:"countryName,omitempty"` // название страны
	City           *string `protobuf:"bytes,4,opt,name=city,proto3,oneof" json:"city,omitempty"`               // название города
	Latitude       float64 `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`           // широта
	Longitude      float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`         // долгота
}

func (x *NavigatorUpdateRequest) Reset() {
	*x = NavigatorUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigatorUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigatorUpdateRequest) ProtoMessage() {}

func (x *NavigatorUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigatorUpdateRequest.ProtoReflect.Descriptor instead.
func (*NavigatorUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{62}
}

func (x *NavigatorUpdateRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *NavigatorUpdateRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *NavigatorUpdateRequest) GetCountryName() string {
	if x != nil && x.CountryName != nil {
		return *x.CountryName
	}
	return ""
}

func (x *NavigatorUpdateRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *NavigatorUpdateRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *NavigatorUpdateRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type NavigatorUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно обновлено да/нет
}

func (x *NavigatorUpdateResponse) Reset() {
	*x = NavigatorUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigatorUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigatorUpdateResponse) ProtoMessage() {}

func (x *NavigatorUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigatorUpdateResponse.ProtoReflect.Descriptor instead.
func (*NavigatorUpdateResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{63}
}

func (x *NavigatorUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramUserId string `protobuf:"bytes,1,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"` // id пользователя в телеграм
	IsHiddenAge    bool   `protobuf:"varint,2,opt,name=isHiddenAge,proto3" json:"isHiddenAge,omitempty"`      // показывать возраст до текущего пользователя да/нет
	Measurement    string `protobuf:"bytes,3,opt,name=measurement,proto3" json:"measurement,omitempty"`       // единицы измерения метрическая/американская
}

func (x *UpdateSettingsRequest) Reset() {
	*x = UpdateSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsRequest) ProtoMessage() {}

func (x *UpdateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateSettingsRequest) GetTelegramUserId() string {
	if x != nil {
		return x.TelegramUserId
	}
	return ""
}

func (x *UpdateSettingsRequest) GetIsHiddenAge() bool {
	if x != nil {
		return x.IsHiddenAge
	}
	return false
}

func (x *UpdateSettingsRequest) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

type UpdateSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // успешно обновлено да/нет
}

func (x *UpdateSettingsResponse) Reset() {
	*x = UpdateSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contracts_proto_profiles_profile_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsResponse) ProtoMessage() {}

func (x *UpdateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateSettingsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_contracts_proto_profiles_profile_proto protoreflect.FileDescriptor

var file_contracts_proto_profiles_profile_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a,
	0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x6d,
	0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x41, 0x0a,
	0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x22, 0x40, 0x0a, 0x11, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x34, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x22, 0x72, 0x0a, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x69, 0x6b, 0x65, 0x64,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf4, 0x07, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xf3, 0x07, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x3e, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x31, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x22, 0xaf, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x44, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x12, 0x42, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xd7, 0x01,
	0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1a, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x1d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x4d, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a,
	0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x3c, 0x0a, 0x12, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f,
	0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2c, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x4c, 0x69,
	0x6b, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x11, 0x4c, 0x69, 0x6b, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x22, 0x2e,
	0x0a, 0x12, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3c,
	0x0a, 0x12, 0x4c, 0x69, 0x6b, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x13,
	0x4c, 0x69, 0x6b, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x22, 0xab, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x22, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x78, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x33, 0x0a, 0x17, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xb0, 0x12, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x55,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x54, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x76, 0x67, 0x65, 0x6e, 0x69, 0x79, 0x42,
	0x75, 0x64, 0x61, 0x65, 0x76, 0x2f, 0x74, 0x67, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contracts_proto_profiles_profile_proto_rawDescOnce sync.Once
	file_contracts_proto_profiles_profile_proto_rawDescData = file_contracts_proto_profiles_profile_proto_rawDesc
)

func file_contracts_proto_profiles_profile_proto_rawDescGZIP() []byte {
	file_contracts_proto_profiles_profile_proto_rawDescOnce.Do(func() {
		file_contracts_proto_profiles_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_contracts_proto_profiles_profile_proto_rawDescData)
	})
	return file_contracts_proto_profiles_profile_proto_rawDescData
}

var file_contracts_proto_profiles_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_contracts_proto_profiles_profile_proto_goTypes = []interface{}{
	(*FileMetadata)(nil),                        // 0: protobuf.FileMetadata
	(*ImageStatusResponse)(nil),                 // 1: protobuf.ImageStatusResponse
	(*ImageResponse)(nil),                       // 2: protobuf.ImageResponse
	(*Point)(nil),                               // 3: protobuf.Point
	(*NavigatorResponse)(nil),                   // 4: protobuf.NavigatorResponse
	(*NavigatorDetailResponse)(nil),             // 5: protobuf.NavigatorDetailResponse
	(*FilterResponse)(nil),                      // 6: protobuf.FilterResponse
	(*TelegramResponse)(nil),                    // 7: protobuf.TelegramResponse
	(*StatusResponse)(nil),                      // 8: protobuf.StatusResponse
	(*SettingsResponse)(nil),                    // 9: protobuf.SettingsResponse
	(*BlockResponse)(nil),                       // 10: protobuf.BlockResponse
	(*LikeResponse)(nil),                        // 11: protobuf.LikeResponse
	(*LikeEntity)(nil),                          // 12: protobuf.LikeEntity
	(*ProfileAddRequest)(nil),                   // 13: protobuf.ProfileAddRequest
	(*ProfileAddResponse)(nil),                  // 14: protobuf.ProfileAddResponse
	(*ProfileUpdateRequest)(nil),                // 15: protobuf.ProfileUpdateRequest
	(*ProfileFreezeRequest)(nil),                // 16: protobuf.ProfileFreezeRequest
	(*ProfileFreezeResponse)(nil),               // 17: protobuf.ProfileFreezeResponse
	(*ProfileRestoreRequest)(nil),               // 18: protobuf.ProfileRestoreRequest
	(*ProfileRestoreResponse)(nil),              // 19: protobuf.ProfileRestoreResponse
	(*ProfileDeleteRequest)(nil),                // 20: protobuf.ProfileDeleteRequest
	(*ProfileDeleteResponse)(nil),               // 21: protobuf.ProfileDeleteResponse
	(*ProfileGetRequest)(nil),                   // 22: protobuf.ProfileGetRequest
	(*ProfileResponse)(nil),                     // 23: protobuf.ProfileResponse
	(*ProfileGetDetailRequest)(nil),             // 24: protobuf.ProfileGetDetailRequest
	(*ProfileDetailResponse)(nil),               // 25: protobuf.ProfileDetailResponse
	(*ProfileGetShortInfoRequest)(nil),          // 26: protobuf.ProfileGetShortInfoRequest
	(*ProfileShortInfoResponse)(nil),            // 27: protobuf.ProfileShortInfoResponse
	(*ProfileGetListRequest)(nil),               // 28: protobuf.ProfileGetListRequest
	(*ProfileListItemResponse)(nil),             // 29: protobuf.ProfileListItemResponse
	(*ProfileListResponse)(nil),                 // 30: protobuf.ProfileListResponse
	(*CheckProfileExistsRequest)(nil),           // 31: protobuf.CheckProfileExistsRequest
	(*CheckProfileExistsResponse)(nil),          // 32: protobuf.CheckProfileExistsResponse
	(*GetImageByTelegramUserIdRequest)(nil),     // 33: protobuf.GetImageByTelegramUserIdRequest
	(*ImageByTelegramUserIdResponse)(nil),       // 34: protobuf.ImageByTelegramUserIdResponse
	(*GetImageLastByTelegramUserIdRequest)(nil), // 35: protobuf.GetImageLastByTelegramUserIdRequest
	(*GetImageByIdRequest)(nil),                 // 36: protobuf.GetImageByIdRequest
	(*ImageDeleteRequest)(nil),                  // 37: protobuf.ImageDeleteRequest
	(*ImageDeleteResponse)(nil),                 // 38: protobuf.ImageDeleteResponse
	(*FilterGetRequest)(nil),                    // 39: protobuf.FilterGetRequest
	(*FilterUpdateRequest)(nil),                 // 40: protobuf.FilterUpdateRequest
	(*TelegramGetRequest)(nil),                  // 41: protobuf.TelegramGetRequest
	(*BlockAddRequest)(nil),                     // 42: protobuf.BlockAddRequest
	(*BlockAddResponse)(nil),                    // 43: protobuf.BlockAddResponse
	(*GetBlockedListRequest)(nil),               // 44: protobuf.GetBlockedListRequest
	(*BlockedListItemResponse)(nil),             // 45: protobuf.BlockedListItemResponse
	(*GetBlockedListResponse)(nil),              // 46: protobuf.GetBlockedListResponse
	(*UnblockRequest)(nil),                      // 47: protobuf.UnblockRequest
	(*UnblockResponse)(nil),                     // 48: protobuf.UnblockResponse
	(*LikeAddRequest)(nil),                      // 49: protobuf.LikeAddRequest
	(*LikeAddResponse)(nil),                     // 50: protobuf.LikeAddResponse
	(*LikeUpdateRequest)(nil),                   // 51: protobuf.LikeUpdateRequest
	(*LikeUpdateResponse)(nil),                  // 52: protobuf.LikeUpdateResponse
	(*LikeGetLastRequest)(nil),                  // 53: protobuf.LikeGetLastRequest
	(*LikeGetLastResponse)(nil),                 // 54: protobuf.LikeGetLastResponse
	(*ComplaintAddRequest)(nil),                 // 55: protobuf.ComplaintAddRequest
	(*ComplaintAddResponse)(nil),                // 56: protobuf.ComplaintAddResponse
	(*GetStatusByTelegramUserIdRequest)(nil),    // 57: protobuf.GetStatusByTelegramUserIdRequest
	(*PaymentAddRequest)(nil),                   // 58: protobuf.PaymentAddRequest
	(*PaymentAddResponse)(nil),                  // 59: protobuf.PaymentAddResponse
	(*CheckPremiumRequest)(nil),                 // 60: protobuf.CheckPremiumRequest
	(*CheckPremiumResponse)(nil),                // 61: protobuf.CheckPremiumResponse
	(*NavigatorUpdateRequest)(nil),              // 62: protobuf.NavigatorUpdateRequest
	(*NavigatorUpdateResponse)(nil),             // 63: protobuf.NavigatorUpdateResponse
	(*UpdateSettingsRequest)(nil),               // 64: protobuf.UpdateSettingsRequest
	(*UpdateSettingsResponse)(nil),              // 65: protobuf.UpdateSettingsResponse
	(*timestamp.Timestamp)(nil),                 // 66: google.protobuf.Timestamp
}
var file_contracts_proto_profiles_profile_proto_depIdxs = []int32{
	3,  // 0: protobuf.NavigatorResponse.location:type_name -> protobuf.Point
	66, // 1: protobuf.LikeResponse.updatedAt:type_name -> google.protobuf.Timestamp
	66, // 2: protobuf.LikeEntity.createdAt:type_name -> google.protobuf.Timestamp
	66, // 3: protobuf.LikeEntity.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 4: protobuf.ProfileAddRequest.files:type_name -> protobuf.FileMetadata
	0,  // 5: protobuf.ProfileUpdateRequest.files:type_name -> protobuf.FileMetadata
	4,  // 6: protobuf.ProfileResponse.navigator:type_name -> protobuf.NavigatorResponse
	6,  // 7: protobuf.ProfileResponse.filter:type_name -> protobuf.FilterResponse
	8,  // 8: protobuf.ProfileResponse.status:type_name -> protobuf.StatusResponse
	9,  // 9: protobuf.ProfileResponse.settings:type_name -> protobuf.SettingsResponse
	2,  // 10: protobuf.ProfileResponse.images:type_name -> protobuf.ImageResponse
	66, // 11: protobuf.ProfileDetailResponse.lastOnline:type_name -> google.protobuf.Timestamp
	5,  // 12: protobuf.ProfileDetailResponse.navigator:type_name -> protobuf.NavigatorDetailResponse
	8,  // 13: protobuf.ProfileDetailResponse.status:type_name -> protobuf.StatusResponse
	9,  // 14: protobuf.ProfileDetailResponse.settings:type_name -> protobuf.SettingsResponse
	10, // 15: protobuf.ProfileDetailResponse.block:type_name -> protobuf.BlockResponse
	11, // 16: protobuf.ProfileDetailResponse.like:type_name -> protobuf.LikeResponse
	2,  // 17: protobuf.ProfileDetailResponse.images:type_name -> protobuf.ImageResponse
	66, // 18: protobuf.ProfileShortInfoResponse.availableUntil:type_name -> google.protobuf.Timestamp
	6,  // 19: protobuf.ProfileShortInfoResponse.filter:type_name -> protobuf.FilterResponse
	66, // 20: protobuf.ProfileListItemResponse.lastOnline:type_name -> google.protobuf.Timestamp
	29, // 21: protobuf.ProfileListResponse.content:type_name -> protobuf.ProfileListItemResponse
	45, // 22: protobuf.GetBlockedListResponse.content:type_name -> protobuf.BlockedListItemResponse
	12, // 23: protobuf.LikeGetLastResponse.like:type_name -> protobuf.LikeEntity
	66, // 24: protobuf.CheckPremiumResponse.availableUntil:type_name -> google.protobuf.Timestamp
	13, // 25: protobuf.Profile.AddProfile:input_type -> protobuf.ProfileAddRequest
	15, // 26: protobuf.Profile.UpdateProfile:input_type -> protobuf.ProfileUpdateRequest
	16, // 27: protobuf.Profile.FreezeProfile:input_type -> protobuf.ProfileFreezeRequest
	18, // 28: protobuf.Profile.RestoreProfile:input_type -> protobuf.ProfileRestoreRequest
	20, // 29: protobuf.Profile.DeleteProfile:input_type -> protobuf.ProfileDeleteRequest
	22, // 30: protobuf.Profile.GetProfile:input_type -> protobuf.ProfileGetRequest
	24, // 31: protobuf.Profile.GetProfileDetail:input_type -> protobuf.ProfileGetDetailRequest
	26, // 32: protobuf.Profile.GetProfileShortInfo:input_type -> protobuf.ProfileGetShortInfoRequest
	28, // 33: protobuf.Profile.GetProfileList:input_type -> protobuf.ProfileGetListRequest
	31, // 34: protobuf.Profile.CheckProfileExists:input_type -> protobuf.CheckProfileExistsRequest
	33, // 35: protobuf.Profile.GetImageByTelegramUserId:input_type -> protobuf.GetImageByTelegramUserIdRequest
	35, // 36: protobuf.Profile.GetImageLastByTelegramUserId:input_type -> protobuf.GetImageLastByTelegramUserIdRequest
	36, // 37: protobuf.Profile.GetImageById:input_type -> protobuf.GetImageByIdRequest
	37, // 38: protobuf.Profile.DeleteImage:input_type -> protobuf.ImageDeleteRequest
	39, // 39: protobuf.Profile.GetFilter:input_type -> protobuf.FilterGetRequest
	40, // 40: protobuf.Profile.UpdateFilter:input_type -> protobuf.FilterUpdateRequest
	41, // 41: protobuf.Profile.GetTelegram:input_type -> protobuf.TelegramGetRequest
	42, // 42: protobuf.Profile.AddBlock:input_type -> protobuf.BlockAddRequest
	44, // 43: protobuf.Profile.GetBlockedList:input_type -> protobuf.GetBlockedListRequest
	47, // 44: protobuf.Profile.Unblock:input_type -> protobuf.UnblockRequest
	49, // 45: protobuf.Profile.AddLike:input_type -> protobuf.LikeAddRequest
	51, // 46: protobuf.Profile.UpdateLike:input_type -> protobuf.LikeUpdateRequest
	53, // 47: protobuf.Profile.GetLastLike:input_type -> protobuf.LikeGetLastRequest
	55, // 48: protobuf.Profile.AddComplaint:input_type -> protobuf.ComplaintAddRequest
	57, // 49: protobuf.Profile.GetStatusByTelegramUserId:input_type -> protobuf.GetStatusByTelegramUserIdRequest
	62, // 50: protobuf.Profile.UpdateCoordinates:input_type -> protobuf.NavigatorUpdateRequest
	58, // 51: protobuf.Profile.AddPayment:input_type -> protobuf.PaymentAddRequest
	60, // 52: protobuf.Profile.CheckPremium:input_type -> protobuf.CheckPremiumRequest
	64, // 53: protobuf.Profile.UpdateSettings:input_type -> protobuf.UpdateSettingsRequest
	14, // 54: protobuf.Profile.AddProfile:output_type -> protobuf.ProfileAddResponse
	23, // 55: protobuf.Profile.UpdateProfile:output_type -> protobuf.ProfileResponse
	17, // 56: protobuf.Profile.FreezeProfile:output_type -> protobuf.ProfileFreezeResponse
	19, // 57: protobuf.Profile.RestoreProfile:output_type -> protobuf.ProfileRestoreResponse
	21, // 58: protobuf.Profile.DeleteProfile:output_type -> protobuf.ProfileDeleteResponse
	23, // 59: protobuf.Profile.GetProfile:output_type -> protobuf.ProfileResponse
	25, // 60: protobuf.Profile.GetProfileDetail:output_type -> protobuf.ProfileDetailResponse
	27, // 61: protobuf.Profile.GetProfileShortInfo:output_type -> protobuf.ProfileShortInfoResponse
	30, // 62: protobuf.Profile.GetProfileList:output_type -> protobuf.ProfileListResponse
	32, // 63: protobuf.Profile.CheckProfileExists:output_type -> protobuf.CheckProfileExistsResponse
	34, // 64: protobuf.Profile.GetImageByTelegramUserId:output_type -> protobuf.ImageByTelegramUserIdResponse
	2,  // 65: protobuf.Profile.GetImageLastByTelegramUserId:output_type -> protobuf.ImageResponse
	2,  // 66: protobuf.Profile.GetImageById:output_type -> protobuf.ImageResponse
	38, // 67: protobuf.Profile.DeleteImage:output_type -> protobuf.ImageDeleteResponse
	6,  // 68: protobuf.Profile.GetFilter:output_type -> protobuf.FilterResponse
	6,  // 69: protobuf.Profile.UpdateFilter:output_type -> protobuf.FilterResponse
	7,  // 70: protobuf.Profile.GetTelegram:output_type -> protobuf.TelegramResponse
	43, // 71: protobuf.Profile.AddBlock:output_type -> protobuf.BlockAddResponse
	46, // 72: protobuf.Profile.GetBlockedList:output_type -> protobuf.GetBlockedListResponse
	48, // 73: protobuf.Profile.Unblock:output_type -> protobuf.UnblockResponse
	50, // 74: protobuf.Profile.AddLike:output_type -> protobuf.LikeAddResponse
	52, // 75: protobuf.Profile.UpdateLike:output_type -> protobuf.LikeUpdateResponse
	54, // 76: protobuf.Profile.GetLastLike:output_type -> protobuf.LikeGetLastResponse
	56, // 77: protobuf.Profile.AddComplaint:output_type -> protobuf.ComplaintAddResponse
	8,  // 78: protobuf.Profile.GetStatusByTelegramUserId:output_type -> protobuf.StatusResponse
	63, // 79: protobuf.Profile.UpdateCoordinates:output_type -> protobuf.NavigatorUpdateResponse
	59, // 80: protobuf.Profile.AddPayment:output_type -> protobuf.PaymentAddResponse
	61, // 81: protobuf.Profile.CheckPremium:output_type -> protobuf.CheckPremiumResponse
	65, // 82: protobuf.Profile.UpdateSettings:output_type -> protobuf.UpdateSettingsResponse
	54, // [54:83] is the sub-list for method output_type
	25, // [25:54] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_contracts_proto_profiles_profile_proto_init() }
func file_contracts_proto_profiles_profile_proto_init() {
	if File_contracts_proto_profiles_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contracts_proto_profiles_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigatorDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelegramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileFreezeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileFreezeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetShortInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileShortInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileListItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProfileExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProfileExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageByTelegramUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageByTelegramUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageLastByTelegramUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelegramGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockedListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedListItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockedListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeGetLastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeGetLastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusByTelegramUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPremiumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPremiumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigatorUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigatorUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contracts_proto_profiles_profile_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contracts_proto_profiles_profile_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_contracts_proto_profiles_profile_proto_msgTypes[62].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contracts_proto_profiles_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contracts_proto_profiles_profile_proto_goTypes,
		DependencyIndexes: file_contracts_proto_profiles_profile_proto_depIdxs,
		MessageInfos:      file_contracts_proto_profiles_profile_proto_msgTypes,
	}.Build()
	File_contracts_proto_profiles_profile_proto = out.File
	file_contracts_proto_profiles_profile_proto_rawDesc = nil
	file_contracts_proto_profiles_profile_proto_goTypes = nil
	file_contracts_proto_profiles_profile_proto_depIdxs = nil
}
