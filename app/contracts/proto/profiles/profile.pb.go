// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: contracts/proto/profiles/profile.proto

package proto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` // Имя файла
	Size     int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`        // Размер файла в байтах
	Content  []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`   // Содержимое файла в виде массива байтов
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{0}
}

func (x *FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMetadata) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileMetadata) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               // id изображения
	SessionId string               `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`  // id сессии
	Name      string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`            // название файла
	Url       string               `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`              // url файла
	Size      int64                `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`           // Размер файла в байтах
	IsDeleted bool                 `protobuf:"varint,6,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"` // удалено изображение да/нет
	IsBlocked bool                 `protobuf:"varint,7,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"` // заблокировано изображение да/нет
	IsPrimary bool                 `protobuf:"varint,8,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"` // изображение является основным да/нет
	IsPrivate bool                 `protobuf:"varint,9,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"` // изображение является приватным да/нет
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"` // дата создания
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"` // дата обновления
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{1}
}

func (x *Image) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Image) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Image) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Image) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *Image) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Image) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Image) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Image) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`   // широта
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"` // долгота
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type NavigatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"` // id сессии
	Location  *Point `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`   // объект с координатами
}

func (x *NavigatorResponse) Reset() {
	*x = NavigatorResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavigatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigatorResponse) ProtoMessage() {}

func (x *NavigatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigatorResponse.ProtoReflect.Descriptor instead.
func (*NavigatorResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{3}
}

func (x *NavigatorResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *NavigatorResponse) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

type NavigatorDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance uint64 `protobuf:"varint,1,opt,name=distance,proto3" json:"distance,omitempty"` // расстояние до просматриваемого пользователя
}

func (x *NavigatorDetailResponse) Reset() {
	*x = NavigatorDetailResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavigatorDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigatorDetailResponse) ProtoMessage() {}

func (x *NavigatorDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigatorDetailResponse.ProtoReflect.Descriptor instead.
func (*NavigatorDetailResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{4}
}

func (x *NavigatorDetailResponse) GetDistance() uint64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    string  `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`       // id сессии
	SearchGender string  `protobuf:"bytes,2,opt,name=searchGender,proto3" json:"searchGender,omitempty"` // поиск по половому признаку
	LookingFor   string  `protobuf:"bytes,3,opt,name=lookingFor,proto3" json:"lookingFor,omitempty"`     // цель поиска
	AgeFrom      uint64  `protobuf:"varint,4,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`          // возраст от
	AgeTo        uint64  `protobuf:"varint,5,opt,name=ageTo,proto3" json:"ageTo,omitempty"`              // возраст до
	Distance     float64 `protobuf:"fixed64,6,opt,name=distance,proto3" json:"distance,omitempty"`       // дистанция
	Page         uint64  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`                // номер текущей страницы
	Size         uint64  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`                // количество элементов на странице
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{5}
}

func (x *FilterResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FilterResponse) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *FilterResponse) GetLookingFor() string {
	if x != nil {
		return x.LookingFor
	}
	return ""
}

func (x *FilterResponse) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *FilterResponse) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *FilterResponse) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *FilterResponse) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FilterResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type TelegramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`              // id сессии
	UserId          uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                   // id пользователя
	Username        string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                // username пользователя
	FirstName       string `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`              // имя пользователя
	LastName        string `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty"`                // фамилия пользователя
	LanguageCode    string `protobuf:"bytes,6,opt,name=languageCode,proto3" json:"languageCode,omitempty"`        // язык пользователя
	AllowsWriteToPm bool   `protobuf:"varint,7,opt,name=allowsWriteToPm,proto3" json:"allowsWriteToPm,omitempty"` // true, если этот пользователь разрешил боту отправлять ему сообщения
	QueryId         string `protobuf:"bytes,8,opt,name=queryId,proto3" json:"queryId,omitempty"`                  // id чата
}

func (x *TelegramResponse) Reset() {
	*x = TelegramResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelegramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramResponse) ProtoMessage() {}

func (x *TelegramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramResponse.ProtoReflect.Descriptor instead.
func (*TelegramResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{6}
}

func (x *TelegramResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TelegramResponse) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TelegramResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TelegramResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TelegramResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TelegramResponse) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TelegramResponse) GetAllowsWriteToPm() bool {
	if x != nil {
		return x.AllowsWriteToPm
	}
	return false
}

func (x *TelegramResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked bool `protobuf:"varint,1,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"` // заблокирован пользователь да/нет
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{7}
}

func (x *BlockResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

type LikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                        // id лайка
	SessionId      string               `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`           // id сессии
	LikedSessionId string               `protobuf:"bytes,3,opt,name=likedSessionId,proto3" json:"likedSessionId,omitempty"` // id сессии того, кого лайкнули
	IsLiked        bool                 `protobuf:"varint,4,opt,name=isLiked,proto3" json:"isLiked,omitempty"`              // установлен лайк да/нет
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`           // дата создания
	UpdatedAt      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`           // дата обновления
}

func (x *LikeResponse) Reset() {
	*x = LikeResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeResponse) ProtoMessage() {}

func (x *LikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeResponse.ProtoReflect.Descriptor instead.
func (*LikeResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{8}
}

func (x *LikeResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LikeResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LikeResponse) GetLikedSessionId() string {
	if x != nil {
		return x.LikedSessionId
	}
	return ""
}

func (x *LikeResponse) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *LikeResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LikeResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProfileAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId               string               `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                               // id сессии
	DisplayName             string               `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`                           // Имя для отображения
	Birthday                *timestamp.Timestamp `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`                                 // дата для рождения
	Gender                  string               `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`                                     // пол
	SearchGender            string               `protobuf:"bytes,5,opt,name=searchGender,proto3" json:"searchGender,omitempty"`                         // поиск по половому признаку
	Location                string               `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`                                 // местоположение
	Description             string               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                           // описание
	Height                  *float64             `protobuf:"fixed64,8,opt,name=height,proto3,oneof" json:"height,omitempty"`                             // рост
	Weight                  *float64             `protobuf:"fixed64,9,opt,name=weight,proto3,oneof" json:"weight,omitempty"`                             // вес
	LookingFor              string               `protobuf:"bytes,10,opt,name=lookingFor,proto3" json:"lookingFor,omitempty"`                            // цель поиска
	TelegramUserId          uint64               `protobuf:"varint,11,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`                   // id пользователя в телеграм
	TelegramUsername        string               `protobuf:"bytes,12,opt,name=telegramUsername,proto3" json:"telegramUsername,omitempty"`                // username пользователя в телеграм
	TelegramFirstName       string               `protobuf:"bytes,13,opt,name=telegramFirstName,proto3" json:"telegramFirstName,omitempty"`              // имя пользователя в телеграм
	TelegramLastName        string               `protobuf:"bytes,14,opt,name=telegramLastName,proto3" json:"telegramLastName,omitempty"`                // фамилия пользователя в телеграм
	TelegramLanguageCode    string               `protobuf:"bytes,15,opt,name=telegramLanguageCode,proto3" json:"telegramLanguageCode,omitempty"`        // язык пользователя в телеграм
	TelegramAllowsWriteToPm bool                 `protobuf:"varint,16,opt,name=telegramAllowsWriteToPm,proto3" json:"telegramAllowsWriteToPm,omitempty"` // true, если этот пользователь разрешил боту отправлять ему сообщения
	TelegramQueryId         string               `protobuf:"bytes,17,opt,name=telegramQueryId,proto3" json:"telegramQueryId,omitempty"`                  // id чата в телеграм
	Latitude                float64              `protobuf:"fixed64,18,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // широта
	Longitude               float64              `protobuf:"fixed64,19,opt,name=longitude,proto3" json:"longitude,omitempty"`                            // долгота
	AgeFrom                 uint64               `protobuf:"varint,20,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`                                 // возраст от
	AgeTo                   uint64               `protobuf:"varint,21,opt,name=ageTo,proto3" json:"ageTo,omitempty"`                                     // возраст до
	Distance                float64              `protobuf:"fixed64,22,opt,name=distance,proto3" json:"distance,omitempty"`                              // дистанция
	Page                    uint64               `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`                                       // номер текущей страницы
	Size                    uint64               `protobuf:"varint,24,opt,name=size,proto3" json:"size,omitempty"`                                       // количество элементов на странице
	Files                   []*FileMetadata      `protobuf:"bytes,25,rep,name=files,proto3" json:"files,omitempty"`                                      // список файлов-изображений
}

func (x *ProfileAddRequest) Reset() {
	*x = ProfileAddRequest{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileAddRequest) ProtoMessage() {}

func (x *ProfileAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileAddRequest.ProtoReflect.Descriptor instead.
func (*ProfileAddRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{9}
}

func (x *ProfileAddRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProfileAddRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileAddRequest) GetBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *ProfileAddRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileAddRequest) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *ProfileAddRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ProfileAddRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileAddRequest) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *ProfileAddRequest) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *ProfileAddRequest) GetLookingFor() string {
	if x != nil {
		return x.LookingFor
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramUserId() uint64 {
	if x != nil {
		return x.TelegramUserId
	}
	return 0
}

func (x *ProfileAddRequest) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramFirstName() string {
	if x != nil {
		return x.TelegramFirstName
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramLastName() string {
	if x != nil {
		return x.TelegramLastName
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramLanguageCode() string {
	if x != nil {
		return x.TelegramLanguageCode
	}
	return ""
}

func (x *ProfileAddRequest) GetTelegramAllowsWriteToPm() bool {
	if x != nil {
		return x.TelegramAllowsWriteToPm
	}
	return false
}

func (x *ProfileAddRequest) GetTelegramQueryId() string {
	if x != nil {
		return x.TelegramQueryId
	}
	return ""
}

func (x *ProfileAddRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ProfileAddRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ProfileAddRequest) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *ProfileAddRequest) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *ProfileAddRequest) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *ProfileAddRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProfileAddRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProfileAddRequest) GetFiles() []*FileMetadata {
	if x != nil {
		return x.Files
	}
	return nil
}

type ProfileAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"` // id сессии
}

func (x *ProfileAddResponse) Reset() {
	*x = ProfileAddResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileAddResponse) ProtoMessage() {}

func (x *ProfileAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileAddResponse.ProtoReflect.Descriptor instead.
func (*ProfileAddResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{10}
}

func (x *ProfileAddResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ProfileUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId               string               `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                               // id сессии
	DisplayName             string               `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`                           // Имя для отображения
	Birthday                *timestamp.Timestamp `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`                                 // дата для рождения
	Gender                  string               `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`                                     // пол
	SearchGender            string               `protobuf:"bytes,5,opt,name=searchGender,proto3" json:"searchGender,omitempty"`                         // поиск по половому признаку
	Location                string               `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`                                 // местоположение
	Description             string               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                           // описание
	Height                  *float64             `protobuf:"fixed64,8,opt,name=height,proto3,oneof" json:"height,omitempty"`                             // рост
	Weight                  *float64             `protobuf:"fixed64,9,opt,name=weight,proto3,oneof" json:"weight,omitempty"`                             // вес
	LookingFor              string               `protobuf:"bytes,10,opt,name=lookingFor,proto3" json:"lookingFor,omitempty"`                            // цель поиска
	TelegramUserId          uint64               `protobuf:"varint,11,opt,name=telegramUserId,proto3" json:"telegramUserId,omitempty"`                   // id пользователя в телеграм
	TelegramUsername        string               `protobuf:"bytes,12,opt,name=telegramUsername,proto3" json:"telegramUsername,omitempty"`                // username пользователя в телеграм
	TelegramFirstName       string               `protobuf:"bytes,13,opt,name=telegramFirstName,proto3" json:"telegramFirstName,omitempty"`              // имя пользователя в телеграм
	TelegramLastName        string               `protobuf:"bytes,14,opt,name=telegramLastName,proto3" json:"telegramLastName,omitempty"`                // фамилия пользователя в телеграм
	TelegramLanguageCode    string               `protobuf:"bytes,15,opt,name=telegramLanguageCode,proto3" json:"telegramLanguageCode,omitempty"`        // язык пользователя в телеграм
	TelegramAllowsWriteToPm bool                 `protobuf:"varint,16,opt,name=telegramAllowsWriteToPm,proto3" json:"telegramAllowsWriteToPm,omitempty"` // true, если этот пользователь разрешил боту отправлять ему сообщения
	TelegramQueryId         string               `protobuf:"bytes,17,opt,name=telegramQueryId,proto3" json:"telegramQueryId,omitempty"`                  // id чата в телеграм
	Latitude                float64              `protobuf:"fixed64,18,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // широта
	Longitude               float64              `protobuf:"fixed64,19,opt,name=longitude,proto3" json:"longitude,omitempty"`                            // долгота
	AgeFrom                 uint64               `protobuf:"varint,20,opt,name=ageFrom,proto3" json:"ageFrom,omitempty"`                                 // возраст от
	AgeTo                   uint64               `protobuf:"varint,21,opt,name=ageTo,proto3" json:"ageTo,omitempty"`                                     // возраст до
	Distance                float64              `protobuf:"fixed64,22,opt,name=distance,proto3" json:"distance,omitempty"`                              // дистанция
	Page                    uint64               `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`                                       // номер текущей страницы
	Size                    uint64               `protobuf:"varint,24,opt,name=size,proto3" json:"size,omitempty"`                                       // количество элементов на странице
	IsImages                bool                 `protobuf:"varint,25,opt,name=isImages,proto3" json:"isImages,omitempty"`
	Files                   []*FileMetadata      `protobuf:"bytes,26,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ProfileUpdateRequest) Reset() {
	*x = ProfileUpdateRequest{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileUpdateRequest) ProtoMessage() {}

func (x *ProfileUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProfileUpdateRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{11}
}

func (x *ProfileUpdateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProfileUpdateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *ProfileUpdateRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileUpdateRequest) GetSearchGender() string {
	if x != nil {
		return x.SearchGender
	}
	return ""
}

func (x *ProfileUpdateRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ProfileUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileUpdateRequest) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *ProfileUpdateRequest) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *ProfileUpdateRequest) GetLookingFor() string {
	if x != nil {
		return x.LookingFor
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramUserId() uint64 {
	if x != nil {
		return x.TelegramUserId
	}
	return 0
}

func (x *ProfileUpdateRequest) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramFirstName() string {
	if x != nil {
		return x.TelegramFirstName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramLastName() string {
	if x != nil {
		return x.TelegramLastName
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramLanguageCode() string {
	if x != nil {
		return x.TelegramLanguageCode
	}
	return ""
}

func (x *ProfileUpdateRequest) GetTelegramAllowsWriteToPm() bool {
	if x != nil {
		return x.TelegramAllowsWriteToPm
	}
	return false
}

func (x *ProfileUpdateRequest) GetTelegramQueryId() string {
	if x != nil {
		return x.TelegramQueryId
	}
	return ""
}

func (x *ProfileUpdateRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ProfileUpdateRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ProfileUpdateRequest) GetAgeFrom() uint64 {
	if x != nil {
		return x.AgeFrom
	}
	return 0
}

func (x *ProfileUpdateRequest) GetAgeTo() uint64 {
	if x != nil {
		return x.AgeTo
	}
	return 0
}

func (x *ProfileUpdateRequest) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *ProfileUpdateRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProfileUpdateRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProfileUpdateRequest) GetIsImages() bool {
	if x != nil {
		return x.IsImages
	}
	return false
}

func (x *ProfileUpdateRequest) GetFiles() []*FileMetadata {
	if x != nil {
		return x.Files
	}
	return nil
}

type ProfileGetBySessionIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string  `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`   // id сессии
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`   // широта
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"` // долгота
}

func (x *ProfileGetBySessionIdRequest) Reset() {
	*x = ProfileGetBySessionIdRequest{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileGetBySessionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetBySessionIdRequest) ProtoMessage() {}

func (x *ProfileGetBySessionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetBySessionIdRequest.ProtoReflect.Descriptor instead.
func (*ProfileGetBySessionIdRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{12}
}

func (x *ProfileGetBySessionIdRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProfileGetBySessionIdRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ProfileGetBySessionIdRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type ProfileBySessionIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string               `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`             // id сессии
	DisplayName    string               `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`         // Имя для отображения
	Birthday       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`               // дата для рождения
	Gender         string               `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`                   // пол
	Location       string               `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`               // местоположение
	Description    string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`         // описание
	Height         *float64             `protobuf:"fixed64,7,opt,name=height,proto3,oneof" json:"height,omitempty"`           // рост
	Weight         *float64             `protobuf:"fixed64,8,opt,name=weight,proto3,oneof" json:"weight,omitempty"`           // вес
	IsDeleted      bool                 `protobuf:"varint,9,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`            // удален пользователь да/нет
	IsBlocked      bool                 `protobuf:"varint,10,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"`           // заблокирован пользователь да/нет
	IsPremium      bool                 `protobuf:"varint,11,opt,name=isPremium,proto3" json:"isPremium,omitempty"`           // наличие премиум аакаунта да/нет
	IsShowDistance bool                 `protobuf:"varint,12,opt,name=isShowDistance,proto3" json:"isShowDistance,omitempty"` // показывать дистанцию до текущего пользваотеля да/нет
	IsInvisible    bool                 `protobuf:"varint,13,opt,name=isInvisible,proto3" json:"isInvisible,omitempty"`       // неведимка да/нет
	IsOnline       bool                 `protobuf:"varint,14,opt,name=isOnline,proto3" json:"isOnline,omitempty"`             // пользователь онлайн да/нет
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`            // дата создания
	UpdatedAt      *timestamp.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`            // дата обновления
	LastOnline     *timestamp.Timestamp `protobuf:"bytes,17,opt,name=lastOnline,proto3" json:"lastOnline,omitempty"`          // дата последнего входа в систему
	Navigator      *NavigatorResponse   `protobuf:"bytes,18,opt,name=navigator,proto3" json:"navigator,omitempty"`            // объект навигатор
	Filter         *FilterResponse      `protobuf:"bytes,19,opt,name=filter,proto3" json:"filter,omitempty"`                  // объект фильтр
	Telegram       *TelegramResponse    `protobuf:"bytes,20,opt,name=telegram,proto3" json:"telegram,omitempty"`              // объект телеграм
	Images         []*Image             `protobuf:"bytes,21,rep,name=images,proto3" json:"images,omitempty"`                  // список изображений
}

func (x *ProfileBySessionIdResponse) Reset() {
	*x = ProfileBySessionIdResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileBySessionIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileBySessionIdResponse) ProtoMessage() {}

func (x *ProfileBySessionIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileBySessionIdResponse.ProtoReflect.Descriptor instead.
func (*ProfileBySessionIdResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{13}
}

func (x *ProfileBySessionIdResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProfileBySessionIdResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileBySessionIdResponse) GetBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileBySessionIdResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ProfileBySessionIdResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileBySessionIdResponse) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *ProfileBySessionIdResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *ProfileBySessionIdResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ProfileBySessionIdResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *ProfileBySessionIdResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *ProfileBySessionIdResponse) GetIsShowDistance() bool {
	if x != nil {
		return x.IsShowDistance
	}
	return false
}

func (x *ProfileBySessionIdResponse) GetIsInvisible() bool {
	if x != nil {
		return x.IsInvisible
	}
	return false
}

func (x *ProfileBySessionIdResponse) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *ProfileBySessionIdResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetLastOnline() *timestamp.Timestamp {
	if x != nil {
		return x.LastOnline
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetNavigator() *NavigatorResponse {
	if x != nil {
		return x.Navigator
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetFilter() *FilterResponse {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetTelegram() *TelegramResponse {
	if x != nil {
		return x.Telegram
	}
	return nil
}

func (x *ProfileBySessionIdResponse) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type ProfileGetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       string  `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`             // id сессии
	ViewedSessionId string  `protobuf:"bytes,2,opt,name=viewedSessionId,proto3" json:"viewedSessionId,omitempty"` // id сессии того, кого смотрим
	Latitude        float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`             // широта
	Longitude       float64 `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`           // долгота
}

func (x *ProfileGetDetailRequest) Reset() {
	*x = ProfileGetDetailRequest{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileGetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileGetDetailRequest) ProtoMessage() {}

func (x *ProfileGetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileGetDetailRequest.ProtoReflect.Descriptor instead.
func (*ProfileGetDetailRequest) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{14}
}

func (x *ProfileGetDetailRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetViewedSessionId() string {
	if x != nil {
		return x.ViewedSessionId
	}
	return ""
}

func (x *ProfileGetDetailRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ProfileGetDetailRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type ProfileDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string                   `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`             // id сессии
	DisplayName    string                   `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`         // Имя для отображения
	Birthday       *timestamp.Timestamp     `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`               // дата для рождения
	Gender         string                   `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`                   // пол
	Location       string                   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`               // местоположение
	Description    string                   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`         // описание
	Height         *float64                 `protobuf:"fixed64,7,opt,name=height,proto3,oneof" json:"height,omitempty"`           // рост
	Weight         *float64                 `protobuf:"fixed64,8,opt,name=weight,proto3,oneof" json:"weight,omitempty"`           // вес
	IsDeleted      bool                     `protobuf:"varint,9,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`            // удален пользователь да/нет
	IsBlocked      bool                     `protobuf:"varint,10,opt,name=isBlocked,proto3" json:"isBlocked,omitempty"`           // заблокирован пользователь да/нет
	IsPremium      bool                     `protobuf:"varint,11,opt,name=isPremium,proto3" json:"isPremium,omitempty"`           // наличие премиум аакаунта да/нет
	IsShowDistance bool                     `protobuf:"varint,12,opt,name=isShowDistance,proto3" json:"isShowDistance,omitempty"` // показывать дистанцию до текущего пользователя да/нет
	IsInvisible    bool                     `protobuf:"varint,13,opt,name=isInvisible,proto3" json:"isInvisible,omitempty"`       // неведимка да/нет
	IsOnline       bool                     `protobuf:"varint,14,opt,name=isOnline,proto3" json:"isOnline,omitempty"`             // пользователь онлайн да/нет
	CreatedAt      *timestamp.Timestamp     `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`            // дата создания
	UpdatedAt      *timestamp.Timestamp     `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`            // дата обновления
	LastOnline     *timestamp.Timestamp     `protobuf:"bytes,17,opt,name=lastOnline,proto3" json:"lastOnline,omitempty"`          // дата последнего входа в систему
	Navigator      *NavigatorDetailResponse `protobuf:"bytes,18,opt,name=navigator,proto3" json:"navigator,omitempty"`            // объект навигатор
	Telegram       *TelegramResponse        `protobuf:"bytes,19,opt,name=telegram,proto3" json:"telegram,omitempty"`              // объект телеграм
	Block          *BlockResponse           `protobuf:"bytes,20,opt,name=block,proto3" json:"block,omitempty"`                    // объект блок
	Like           *LikeResponse            `protobuf:"bytes,21,opt,name=like,proto3" json:"like,omitempty"`                      //  объект дайк
	Images         []*Image                 `protobuf:"bytes,22,rep,name=images,proto3" json:"images,omitempty"`                  // список изображений
}

func (x *ProfileDetailResponse) Reset() {
	*x = ProfileDetailResponse{}
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDetailResponse) ProtoMessage() {}

func (x *ProfileDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contracts_proto_profiles_profile_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDetailResponse.ProtoReflect.Descriptor instead.
func (*ProfileDetailResponse) Descriptor() ([]byte, []int) {
	return file_contracts_proto_profiles_profile_proto_rawDescGZIP(), []int{15}
}

func (x *ProfileDetailResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProfileDetailResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileDetailResponse) GetBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *ProfileDetailResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProfileDetailResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ProfileDetailResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileDetailResponse) GetHeight() float64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *ProfileDetailResponse) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *ProfileDetailResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ProfileDetailResponse) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

func (x *ProfileDetailResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *ProfileDetailResponse) GetIsShowDistance() bool {
	if x != nil {
		return x.IsShowDistance
	}
	return false
}

func (x *ProfileDetailResponse) GetIsInvisible() bool {
	if x != nil {
		return x.IsInvisible
	}
	return false
}

func (x *ProfileDetailResponse) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *ProfileDetailResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProfileDetailResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProfileDetailResponse) GetLastOnline() *timestamp.Timestamp {
	if x != nil {
		return x.LastOnline
	}
	return nil
}

func (x *ProfileDetailResponse) GetNavigator() *NavigatorDetailResponse {
	if x != nil {
		return x.Navigator
	}
	return nil
}

func (x *ProfileDetailResponse) GetTelegram() *TelegramResponse {
	if x != nil {
		return x.Telegram
	}
	return nil
}

func (x *ProfileDetailResponse) GetBlock() *BlockResponse {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ProfileDetailResponse) GetLike() *LikeResponse {
	if x != nil {
		return x.Like
	}
	return nil
}

func (x *ProfileDetailResponse) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

var File_contracts_proto_profiles_profile_proto protoreflect.FileDescriptor

var file_contracts_proto_profiles_profile_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xdb, 0x02,
	0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x41, 0x0a, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x5e,
	0x0a, 0x11, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35,
	0x0a, 0x17, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x86,
	0x02, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x97, 0x07, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x32, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x07, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x76, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xf8, 0x06, 0x0a, 0x1a, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x22, 0xa2, 0x07, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2d,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a,
	0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0xe8, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x45, 0x76, 0x67, 0x65, 0x6e, 0x69, 0x79, 0x42, 0x75, 0x64, 0x61, 0x65, 0x76, 0x2f,
	0x74, 0x67, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contracts_proto_profiles_profile_proto_rawDescOnce sync.Once
	file_contracts_proto_profiles_profile_proto_rawDescData = file_contracts_proto_profiles_profile_proto_rawDesc
)

func file_contracts_proto_profiles_profile_proto_rawDescGZIP() []byte {
	file_contracts_proto_profiles_profile_proto_rawDescOnce.Do(func() {
		file_contracts_proto_profiles_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_contracts_proto_profiles_profile_proto_rawDescData)
	})
	return file_contracts_proto_profiles_profile_proto_rawDescData
}

var file_contracts_proto_profiles_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_contracts_proto_profiles_profile_proto_goTypes = []any{
	(*FileMetadata)(nil),                 // 0: protobuf.FileMetadata
	(*Image)(nil),                        // 1: protobuf.Image
	(*Point)(nil),                        // 2: protobuf.Point
	(*NavigatorResponse)(nil),            // 3: protobuf.NavigatorResponse
	(*NavigatorDetailResponse)(nil),      // 4: protobuf.NavigatorDetailResponse
	(*FilterResponse)(nil),               // 5: protobuf.FilterResponse
	(*TelegramResponse)(nil),             // 6: protobuf.TelegramResponse
	(*BlockResponse)(nil),                // 7: protobuf.BlockResponse
	(*LikeResponse)(nil),                 // 8: protobuf.LikeResponse
	(*ProfileAddRequest)(nil),            // 9: protobuf.ProfileAddRequest
	(*ProfileAddResponse)(nil),           // 10: protobuf.ProfileAddResponse
	(*ProfileUpdateRequest)(nil),         // 11: protobuf.ProfileUpdateRequest
	(*ProfileGetBySessionIdRequest)(nil), // 12: protobuf.ProfileGetBySessionIdRequest
	(*ProfileBySessionIdResponse)(nil),   // 13: protobuf.ProfileBySessionIdResponse
	(*ProfileGetDetailRequest)(nil),      // 14: protobuf.ProfileGetDetailRequest
	(*ProfileDetailResponse)(nil),        // 15: protobuf.ProfileDetailResponse
	(*timestamp.Timestamp)(nil),          // 16: google.protobuf.Timestamp
}
var file_contracts_proto_profiles_profile_proto_depIdxs = []int32{
	16, // 0: protobuf.Image.createdAt:type_name -> google.protobuf.Timestamp
	16, // 1: protobuf.Image.updatedAt:type_name -> google.protobuf.Timestamp
	2,  // 2: protobuf.NavigatorResponse.location:type_name -> protobuf.Point
	16, // 3: protobuf.LikeResponse.createdAt:type_name -> google.protobuf.Timestamp
	16, // 4: protobuf.LikeResponse.updatedAt:type_name -> google.protobuf.Timestamp
	16, // 5: protobuf.ProfileAddRequest.birthday:type_name -> google.protobuf.Timestamp
	0,  // 6: protobuf.ProfileAddRequest.files:type_name -> protobuf.FileMetadata
	16, // 7: protobuf.ProfileUpdateRequest.birthday:type_name -> google.protobuf.Timestamp
	0,  // 8: protobuf.ProfileUpdateRequest.files:type_name -> protobuf.FileMetadata
	16, // 9: protobuf.ProfileBySessionIdResponse.birthday:type_name -> google.protobuf.Timestamp
	16, // 10: protobuf.ProfileBySessionIdResponse.createdAt:type_name -> google.protobuf.Timestamp
	16, // 11: protobuf.ProfileBySessionIdResponse.updatedAt:type_name -> google.protobuf.Timestamp
	16, // 12: protobuf.ProfileBySessionIdResponse.lastOnline:type_name -> google.protobuf.Timestamp
	3,  // 13: protobuf.ProfileBySessionIdResponse.navigator:type_name -> protobuf.NavigatorResponse
	5,  // 14: protobuf.ProfileBySessionIdResponse.filter:type_name -> protobuf.FilterResponse
	6,  // 15: protobuf.ProfileBySessionIdResponse.telegram:type_name -> protobuf.TelegramResponse
	1,  // 16: protobuf.ProfileBySessionIdResponse.images:type_name -> protobuf.Image
	16, // 17: protobuf.ProfileDetailResponse.birthday:type_name -> google.protobuf.Timestamp
	16, // 18: protobuf.ProfileDetailResponse.createdAt:type_name -> google.protobuf.Timestamp
	16, // 19: protobuf.ProfileDetailResponse.updatedAt:type_name -> google.protobuf.Timestamp
	16, // 20: protobuf.ProfileDetailResponse.lastOnline:type_name -> google.protobuf.Timestamp
	4,  // 21: protobuf.ProfileDetailResponse.navigator:type_name -> protobuf.NavigatorDetailResponse
	6,  // 22: protobuf.ProfileDetailResponse.telegram:type_name -> protobuf.TelegramResponse
	7,  // 23: protobuf.ProfileDetailResponse.block:type_name -> protobuf.BlockResponse
	8,  // 24: protobuf.ProfileDetailResponse.like:type_name -> protobuf.LikeResponse
	1,  // 25: protobuf.ProfileDetailResponse.images:type_name -> protobuf.Image
	9,  // 26: protobuf.Profile.AddProfile:input_type -> protobuf.ProfileAddRequest
	11, // 27: protobuf.Profile.UpdateProfile:input_type -> protobuf.ProfileUpdateRequest
	12, // 28: protobuf.Profile.GetProfileBySessionId:input_type -> protobuf.ProfileGetBySessionIdRequest
	14, // 29: protobuf.Profile.GetProfileDetail:input_type -> protobuf.ProfileGetDetailRequest
	10, // 30: protobuf.Profile.AddProfile:output_type -> protobuf.ProfileAddResponse
	13, // 31: protobuf.Profile.UpdateProfile:output_type -> protobuf.ProfileBySessionIdResponse
	13, // 32: protobuf.Profile.GetProfileBySessionId:output_type -> protobuf.ProfileBySessionIdResponse
	15, // 33: protobuf.Profile.GetProfileDetail:output_type -> protobuf.ProfileDetailResponse
	30, // [30:34] is the sub-list for method output_type
	26, // [26:30] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_contracts_proto_profiles_profile_proto_init() }
func file_contracts_proto_profiles_profile_proto_init() {
	if File_contracts_proto_profiles_profile_proto != nil {
		return
	}
	file_contracts_proto_profiles_profile_proto_msgTypes[9].OneofWrappers = []any{}
	file_contracts_proto_profiles_profile_proto_msgTypes[11].OneofWrappers = []any{}
	file_contracts_proto_profiles_profile_proto_msgTypes[13].OneofWrappers = []any{}
	file_contracts_proto_profiles_profile_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contracts_proto_profiles_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contracts_proto_profiles_profile_proto_goTypes,
		DependencyIndexes: file_contracts_proto_profiles_profile_proto_depIdxs,
		MessageInfos:      file_contracts_proto_profiles_profile_proto_msgTypes,
	}.Build()
	File_contracts_proto_profiles_profile_proto = out.File
	file_contracts_proto_profiles_profile_proto_rawDesc = nil
	file_contracts_proto_profiles_profile_proto_goTypes = nil
	file_contracts_proto_profiles_profile_proto_depIdxs = nil
}
